//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbFirmsEntities : DbContext
    {
        public dbFirmsEntities()
            : base("name=dbFirmsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ADDRESSS> ADDRESSSes { get; set; }
        public virtual DbSet<BUSINESSTYPE> BUSINESSTYPEs { get; set; }
        public virtual DbSet<DISTRICT> DISTRICTs { get; set; }
        public virtual DbSet<DOCUMENT> DOCUMENTs { get; set; }
        public virtual DbSet<ORGANIZATION> ORGANIZATIONs { get; set; }
        public virtual DbSet<ORGDOC> ORGDOCs { get; set; }
        public virtual DbSet<ORGDOCNAME> ORGDOCNAMEs { get; set; }
        public virtual DbSet<ORGTYPE> ORGTYPEs { get; set; }
        public virtual DbSet<PARTNER> PARTNERs { get; set; }
        public virtual DbSet<ROLE> ROLEs { get; set; }
        public virtual DbSet<TEHSIL> TEHSILs { get; set; }
        public virtual DbSet<USER> USERs { get; set; }
        public virtual DbSet<USERROLE> USERROLEs { get; set; }
        public virtual DbSet<WITNESS> WITNESSes { get; set; }
        public virtual DbSet<ADRESSTYPE> ADRESSTYPEs { get; set; }
        public virtual DbSet<DESIGNATION> DESIGNATIONs { get; set; }
        public virtual DbSet<FEETYPE> FEETYPEs { get; set; }
        public virtual DbSet<ORGFEE> ORGFEEs { get; set; }
        public virtual DbSet<View_ORGnName> View_ORGnName { get; set; }
        public virtual DbSet<BANK> BANKs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<ASSET> ASSETs { get; set; }
        public virtual DbSet<ASSOCIATION> ASSOCIATIONs { get; set; }
        public virtual DbSet<BACCOUNT> BACCOUNTS { get; set; }
        public virtual DbSet<FUND> FUNDs { get; set; }
        public virtual DbSet<PARTNERSHARE> PARTNERSHAREs { get; set; }
        public virtual DbSet<RENREPORT> RENREPORTs { get; set; }
        public virtual DbSet<AUDITREPORT> AUDITREPORTs { get; set; }
        public virtual DbSet<PROJECT> PROJECTs { get; set; }
        public virtual DbSet<STAFF> STAFFs { get; set; }
        public virtual DbSet<PARTNERNAMEnADD> PARTNERNAMEnADDs { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_DeactiveBusinessType(Nullable<int> bznsTypeId, Nullable<bool> acDec, Nullable<int> userID)
        {
            var bznsTypeIdParameter = bznsTypeId.HasValue ?
                new ObjectParameter("BznsTypeId", bznsTypeId) :
                new ObjectParameter("BznsTypeId", typeof(int));
    
            var acDecParameter = acDec.HasValue ?
                new ObjectParameter("AcDec", acDec) :
                new ObjectParameter("AcDec", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeactiveBusinessType", bznsTypeIdParameter, acDecParameter, userIDParameter);
        }
    
        public virtual int usp_DeactiveDocument(Nullable<int> docID, Nullable<bool> acDec, Nullable<int> userID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var acDecParameter = acDec.HasValue ?
                new ObjectParameter("AcDec", acDec) :
                new ObjectParameter("AcDec", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeactiveDocument", docIDParameter, acDecParameter, userIDParameter);
        }
    
        public virtual int usp_DeactiveOrgDoc(Nullable<long> orgDocID, Nullable<bool> acDec, Nullable<int> user_ID)
        {
            var orgDocIDParameter = orgDocID.HasValue ?
                new ObjectParameter("OrgDocID", orgDocID) :
                new ObjectParameter("OrgDocID", typeof(long));
    
            var acDecParameter = acDec.HasValue ?
                new ObjectParameter("AcDec", acDec) :
                new ObjectParameter("AcDec", typeof(bool));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeactiveOrgDoc", orgDocIDParameter, acDecParameter, user_IDParameter);
        }
    
        public virtual int usp_DeactiveOrgDocName(Nullable<long> oRGNameID, Nullable<bool> acdec, Nullable<int> user_ID)
        {
            var oRGNameIDParameter = oRGNameID.HasValue ?
                new ObjectParameter("ORGNameID", oRGNameID) :
                new ObjectParameter("ORGNameID", typeof(long));
    
            var acdecParameter = acdec.HasValue ?
                new ObjectParameter("Acdec", acdec) :
                new ObjectParameter("Acdec", typeof(bool));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeactiveOrgDocName", oRGNameIDParameter, acdecParameter, user_IDParameter);
        }
    
        public virtual int usp_DeactiveOrgType(Nullable<int> orgTypeId, Nullable<bool> acDec, Nullable<int> userID)
        {
            var orgTypeIdParameter = orgTypeId.HasValue ?
                new ObjectParameter("OrgTypeId", orgTypeId) :
                new ObjectParameter("OrgTypeId", typeof(int));
    
            var acDecParameter = acDec.HasValue ?
                new ObjectParameter("AcDec", acDec) :
                new ObjectParameter("AcDec", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeactiveOrgType", orgTypeIdParameter, acDecParameter, userIDParameter);
        }
    
        public virtual int usp_DeactivePartner(Nullable<long> partnerID, Nullable<bool> acdec, Nullable<int> user_ID)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(long));
    
            var acdecParameter = acdec.HasValue ?
                new ObjectParameter("Acdec", acdec) :
                new ObjectParameter("Acdec", typeof(bool));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeactivePartner", partnerIDParameter, acdecParameter, user_IDParameter);
        }
    
        public virtual int usp_DeactivePrincipalAddress(Nullable<long> adressID, Nullable<bool> acdec, Nullable<int> user_ID)
        {
            var adressIDParameter = adressID.HasValue ?
                new ObjectParameter("AdressID", adressID) :
                new ObjectParameter("AdressID", typeof(long));
    
            var acdecParameter = acdec.HasValue ?
                new ObjectParameter("Acdec", acdec) :
                new ObjectParameter("Acdec", typeof(bool));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeactivePrincipalAddress", adressIDParameter, acdecParameter, user_IDParameter);
        }
    
        public virtual int usp_DeactiveWitness(Nullable<long> witnessID, Nullable<bool> acdec, string witnessName, Nullable<int> user_ID)
        {
            var witnessIDParameter = witnessID.HasValue ?
                new ObjectParameter("WitnessID", witnessID) :
                new ObjectParameter("WitnessID", typeof(long));
    
            var acdecParameter = acdec.HasValue ?
                new ObjectParameter("Acdec", acdec) :
                new ObjectParameter("Acdec", typeof(bool));
    
            var witnessNameParameter = witnessName != null ?
                new ObjectParameter("WitnessName", witnessName) :
                new ObjectParameter("WitnessName", typeof(string));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeactiveWitness", witnessIDParameter, acdecParameter, witnessNameParameter, user_IDParameter);
        }
    
        public virtual ObjectResult<usp_GetAllFirms_Result> usp_GetAllFirms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllFirms_Result>("usp_GetAllFirms");
        }
    
        public virtual int usp_InsertDocumentPathsSepartely(Nullable<long> orgID, string formAPath, string formHPath, string formAgreement)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(long));
    
            var formAPathParameter = formAPath != null ?
                new ObjectParameter("FormAPath", formAPath) :
                new ObjectParameter("FormAPath", typeof(string));
    
            var formHPathParameter = formHPath != null ?
                new ObjectParameter("FormHPath", formHPath) :
                new ObjectParameter("FormHPath", typeof(string));
    
            var formAgreementParameter = formAgreement != null ?
                new ObjectParameter("formAgreement", formAgreement) :
                new ObjectParameter("formAgreement", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertDocumentPathsSepartely", orgIDParameter, formAPathParameter, formHPathParameter, formAgreementParameter);
        }
    
        public virtual int usp_InsertNewBusinessType(string bznsTypeName, Nullable<int> userID)
        {
            var bznsTypeNameParameter = bznsTypeName != null ?
                new ObjectParameter("BznsTypeName", bznsTypeName) :
                new ObjectParameter("BznsTypeName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewBusinessType", bznsTypeNameParameter, userIDParameter);
        }
    
        public virtual int usp_InsertNewDocument(string docName, Nullable<int> userID)
        {
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewDocument", docNameParameter, userIDParameter);
        }
    
        public virtual int usp_InsertNewOrgDoc(Nullable<long> org_ID, Nullable<int> document_ID, Nullable<System.DateTime> submissionDate, Nullable<int> user_ID, string documentPath)
        {
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            var document_IDParameter = document_ID.HasValue ?
                new ObjectParameter("Document_ID", document_ID) :
                new ObjectParameter("Document_ID", typeof(int));
    
            var submissionDateParameter = submissionDate.HasValue ?
                new ObjectParameter("SubmissionDate", submissionDate) :
                new ObjectParameter("SubmissionDate", typeof(System.DateTime));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var documentPathParameter = documentPath != null ?
                new ObjectParameter("DocumentPath", documentPath) :
                new ObjectParameter("DocumentPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewOrgDoc", org_IDParameter, document_IDParameter, submissionDateParameter, user_IDParameter, documentPathParameter);
        }
    
        public virtual int usp_InsertNewOrgType(string orgTypeName, Nullable<int> userID)
        {
            var orgTypeNameParameter = orgTypeName != null ?
                new ObjectParameter("OrgTypeName", orgTypeName) :
                new ObjectParameter("OrgTypeName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewOrgType", orgTypeNameParameter, userIDParameter);
        }
    
        public virtual int usp_InsertNewPartner(string partnerName, string partnerCNIC, string partnerONIC, Nullable<double> partnerShare, string partnerAddress, string partnerContactNo, string partnerMobileNo, string partnerCitizenNo, string partnerPassportNo, Nullable<long> orgDoc_ID, Nullable<int> user_ID, string nICImgPath, Nullable<int> designationID, string occupation, Nullable<int> nationalityID)
        {
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var partnerCNICParameter = partnerCNIC != null ?
                new ObjectParameter("PartnerCNIC", partnerCNIC) :
                new ObjectParameter("PartnerCNIC", typeof(string));
    
            var partnerONICParameter = partnerONIC != null ?
                new ObjectParameter("PartnerONIC", partnerONIC) :
                new ObjectParameter("PartnerONIC", typeof(string));
    
            var partnerShareParameter = partnerShare.HasValue ?
                new ObjectParameter("PartnerShare", partnerShare) :
                new ObjectParameter("PartnerShare", typeof(double));
    
            var partnerAddressParameter = partnerAddress != null ?
                new ObjectParameter("PartnerAddress", partnerAddress) :
                new ObjectParameter("PartnerAddress", typeof(string));
    
            var partnerContactNoParameter = partnerContactNo != null ?
                new ObjectParameter("PartnerContactNo", partnerContactNo) :
                new ObjectParameter("PartnerContactNo", typeof(string));
    
            var partnerMobileNoParameter = partnerMobileNo != null ?
                new ObjectParameter("PartnerMobileNo", partnerMobileNo) :
                new ObjectParameter("PartnerMobileNo", typeof(string));
    
            var partnerCitizenNoParameter = partnerCitizenNo != null ?
                new ObjectParameter("PartnerCitizenNo", partnerCitizenNo) :
                new ObjectParameter("PartnerCitizenNo", typeof(string));
    
            var partnerPassportNoParameter = partnerPassportNo != null ?
                new ObjectParameter("PartnerPassportNo", partnerPassportNo) :
                new ObjectParameter("PartnerPassportNo", typeof(string));
    
            var orgDoc_IDParameter = orgDoc_ID.HasValue ?
                new ObjectParameter("OrgDoc_ID", orgDoc_ID) :
                new ObjectParameter("OrgDoc_ID", typeof(long));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var nICImgPathParameter = nICImgPath != null ?
                new ObjectParameter("NICImgPath", nICImgPath) :
                new ObjectParameter("NICImgPath", typeof(string));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var nationalityIDParameter = nationalityID.HasValue ?
                new ObjectParameter("NationalityID", nationalityID) :
                new ObjectParameter("NationalityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewPartner", partnerNameParameter, partnerCNICParameter, partnerONICParameter, partnerShareParameter, partnerAddressParameter, partnerContactNoParameter, partnerMobileNoParameter, partnerCitizenNoParameter, partnerPassportNoParameter, orgDoc_IDParameter, user_IDParameter, nICImgPathParameter, designationIDParameter, occupationParameter, nationalityIDParameter);
        }
    
        public virtual int usp_InsertNewPrincipalAddress(Nullable<long> orgDoc_ID, Nullable<int> adressType_ID, string adressDetails, Nullable<int> tehsil_ID, Nullable<int> user_ID)
        {
            var orgDoc_IDParameter = orgDoc_ID.HasValue ?
                new ObjectParameter("OrgDoc_ID", orgDoc_ID) :
                new ObjectParameter("OrgDoc_ID", typeof(long));
    
            var adressType_IDParameter = adressType_ID.HasValue ?
                new ObjectParameter("AdressType_ID", adressType_ID) :
                new ObjectParameter("AdressType_ID", typeof(int));
    
            var adressDetailsParameter = adressDetails != null ?
                new ObjectParameter("AdressDetails", adressDetails) :
                new ObjectParameter("AdressDetails", typeof(string));
    
            var tehsil_IDParameter = tehsil_ID.HasValue ?
                new ObjectParameter("Tehsil_ID", tehsil_ID) :
                new ObjectParameter("Tehsil_ID", typeof(int));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewPrincipalAddress", orgDoc_IDParameter, adressType_IDParameter, adressDetailsParameter, tehsil_IDParameter, user_IDParameter);
        }
    
        public virtual int usp_InsertNewWitness(string witnessName, string witnessCNIC, string witnessONIC, string witnessAddress, string witnessContactNo, string witnessMobileNo, string witnessCitizenNo, string witnessPassportNo, Nullable<long> orgDoc_ID, Nullable<int> user_ID)
        {
            var witnessNameParameter = witnessName != null ?
                new ObjectParameter("WitnessName", witnessName) :
                new ObjectParameter("WitnessName", typeof(string));
    
            var witnessCNICParameter = witnessCNIC != null ?
                new ObjectParameter("WitnessCNIC", witnessCNIC) :
                new ObjectParameter("WitnessCNIC", typeof(string));
    
            var witnessONICParameter = witnessONIC != null ?
                new ObjectParameter("WitnessONIC", witnessONIC) :
                new ObjectParameter("WitnessONIC", typeof(string));
    
            var witnessAddressParameter = witnessAddress != null ?
                new ObjectParameter("WitnessAddress", witnessAddress) :
                new ObjectParameter("WitnessAddress", typeof(string));
    
            var witnessContactNoParameter = witnessContactNo != null ?
                new ObjectParameter("WitnessContactNo", witnessContactNo) :
                new ObjectParameter("WitnessContactNo", typeof(string));
    
            var witnessMobileNoParameter = witnessMobileNo != null ?
                new ObjectParameter("WitnessMobileNo", witnessMobileNo) :
                new ObjectParameter("WitnessMobileNo", typeof(string));
    
            var witnessCitizenNoParameter = witnessCitizenNo != null ?
                new ObjectParameter("WitnessCitizenNo", witnessCitizenNo) :
                new ObjectParameter("WitnessCitizenNo", typeof(string));
    
            var witnessPassportNoParameter = witnessPassportNo != null ?
                new ObjectParameter("WitnessPassportNo", witnessPassportNo) :
                new ObjectParameter("WitnessPassportNo", typeof(string));
    
            var orgDoc_IDParameter = orgDoc_ID.HasValue ?
                new ObjectParameter("OrgDoc_ID", orgDoc_ID) :
                new ObjectParameter("OrgDoc_ID", typeof(long));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewWitness", witnessNameParameter, witnessCNICParameter, witnessONICParameter, witnessAddressParameter, witnessContactNoParameter, witnessMobileNoParameter, witnessCitizenNoParameter, witnessPassportNoParameter, orgDoc_IDParameter, user_IDParameter);
        }
    
        public virtual int usp_InsertOldFirmData(string orgRegNo, string durationofFirm, Nullable<System.DateTime> formADate, string challanNo, Nullable<decimal> challanAmount, string formGNo, Nullable<System.DateTime> firmStartDate, Nullable<int> orgType_ID, string notaryPublicName, string notaryLicense, Nullable<System.DateTime> agreementDate, Nullable<int> user_ID, string orgRegName, string issueNo, Nullable<int> docID, Nullable<System.DateTime> submissionDate, string docPath, ObjectParameter orgID, ObjectParameter orgDocID, Nullable<System.DateTime> formHIssueDate, string formHPath, string formAgreementPath, string remarks, Nullable<int> bankDistrict_ID, Nullable<System.DateTime> feeDate, Nullable<System.DateTime> executionDate, Nullable<System.DateTime> licenseIssueDate, Nullable<int> bankID)
        {
            var orgRegNoParameter = orgRegNo != null ?
                new ObjectParameter("OrgRegNo", orgRegNo) :
                new ObjectParameter("OrgRegNo", typeof(string));
    
            var durationofFirmParameter = durationofFirm != null ?
                new ObjectParameter("DurationofFirm", durationofFirm) :
                new ObjectParameter("DurationofFirm", typeof(string));
    
            var formADateParameter = formADate.HasValue ?
                new ObjectParameter("FormADate", formADate) :
                new ObjectParameter("FormADate", typeof(System.DateTime));
    
            var challanNoParameter = challanNo != null ?
                new ObjectParameter("ChallanNo", challanNo) :
                new ObjectParameter("ChallanNo", typeof(string));
    
            var challanAmountParameter = challanAmount.HasValue ?
                new ObjectParameter("ChallanAmount", challanAmount) :
                new ObjectParameter("ChallanAmount", typeof(decimal));
    
            var formGNoParameter = formGNo != null ?
                new ObjectParameter("FormGNo", formGNo) :
                new ObjectParameter("FormGNo", typeof(string));
    
            var firmStartDateParameter = firmStartDate.HasValue ?
                new ObjectParameter("FirmStartDate", firmStartDate) :
                new ObjectParameter("FirmStartDate", typeof(System.DateTime));
    
            var orgType_IDParameter = orgType_ID.HasValue ?
                new ObjectParameter("OrgType_ID", orgType_ID) :
                new ObjectParameter("OrgType_ID", typeof(int));
    
            var notaryPublicNameParameter = notaryPublicName != null ?
                new ObjectParameter("NotaryPublicName", notaryPublicName) :
                new ObjectParameter("NotaryPublicName", typeof(string));
    
            var notaryLicenseParameter = notaryLicense != null ?
                new ObjectParameter("NotaryLicense", notaryLicense) :
                new ObjectParameter("NotaryLicense", typeof(string));
    
            var agreementDateParameter = agreementDate.HasValue ?
                new ObjectParameter("AgreementDate", agreementDate) :
                new ObjectParameter("AgreementDate", typeof(System.DateTime));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var orgRegNameParameter = orgRegName != null ?
                new ObjectParameter("OrgRegName", orgRegName) :
                new ObjectParameter("OrgRegName", typeof(string));
    
            var issueNoParameter = issueNo != null ?
                new ObjectParameter("IssueNo", issueNo) :
                new ObjectParameter("IssueNo", typeof(string));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var submissionDateParameter = submissionDate.HasValue ?
                new ObjectParameter("SubmissionDate", submissionDate) :
                new ObjectParameter("SubmissionDate", typeof(System.DateTime));
    
            var docPathParameter = docPath != null ?
                new ObjectParameter("DocPath", docPath) :
                new ObjectParameter("DocPath", typeof(string));
    
            var formHIssueDateParameter = formHIssueDate.HasValue ?
                new ObjectParameter("FormHIssueDate", formHIssueDate) :
                new ObjectParameter("FormHIssueDate", typeof(System.DateTime));
    
            var formHPathParameter = formHPath != null ?
                new ObjectParameter("FormHPath", formHPath) :
                new ObjectParameter("FormHPath", typeof(string));
    
            var formAgreementPathParameter = formAgreementPath != null ?
                new ObjectParameter("FormAgreementPath", formAgreementPath) :
                new ObjectParameter("FormAgreementPath", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var bankDistrict_IDParameter = bankDistrict_ID.HasValue ?
                new ObjectParameter("BankDistrict_ID", bankDistrict_ID) :
                new ObjectParameter("BankDistrict_ID", typeof(int));
    
            var feeDateParameter = feeDate.HasValue ?
                new ObjectParameter("FeeDate", feeDate) :
                new ObjectParameter("FeeDate", typeof(System.DateTime));
    
            var executionDateParameter = executionDate.HasValue ?
                new ObjectParameter("ExecutionDate", executionDate) :
                new ObjectParameter("ExecutionDate", typeof(System.DateTime));
    
            var licenseIssueDateParameter = licenseIssueDate.HasValue ?
                new ObjectParameter("LicenseIssueDate", licenseIssueDate) :
                new ObjectParameter("LicenseIssueDate", typeof(System.DateTime));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertOldFirmData", orgRegNoParameter, durationofFirmParameter, formADateParameter, challanNoParameter, challanAmountParameter, formGNoParameter, firmStartDateParameter, orgType_IDParameter, notaryPublicNameParameter, notaryLicenseParameter, agreementDateParameter, user_IDParameter, orgRegNameParameter, issueNoParameter, docIDParameter, submissionDateParameter, docPathParameter, orgID, orgDocID, formHIssueDateParameter, formHPathParameter, formAgreementPathParameter, remarksParameter, bankDistrict_IDParameter, feeDateParameter, executionDateParameter, licenseIssueDateParameter, bankIDParameter);
        }
    
        public virtual int usp_UpdateBusinessType(Nullable<int> bznsTypeId, string bznsTypeName, Nullable<int> userID)
        {
            var bznsTypeIdParameter = bznsTypeId.HasValue ?
                new ObjectParameter("BznsTypeId", bznsTypeId) :
                new ObjectParameter("BznsTypeId", typeof(int));
    
            var bznsTypeNameParameter = bznsTypeName != null ?
                new ObjectParameter("BznsTypeName", bznsTypeName) :
                new ObjectParameter("BznsTypeName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateBusinessType", bznsTypeIdParameter, bznsTypeNameParameter, userIDParameter);
        }
    
        public virtual int usp_UpdateDocument(Nullable<int> docID, string docName, Nullable<int> userID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDocument", docIDParameter, docNameParameter, userIDParameter);
        }
    
        public virtual int usp_UpdateFirmBaiscInfo(Nullable<long> orgID, string orgRegNo, string durationofFirm, Nullable<System.DateTime> formADate, string formGNo, Nullable<System.DateTime> firmStartDate, Nullable<int> orgType_ID, string notaryPublicName, string notaryLicense, Nullable<System.DateTime> agreementDate, Nullable<int> user_ID, Nullable<System.DateTime> submissionDate, string remarks)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(long));
    
            var orgRegNoParameter = orgRegNo != null ?
                new ObjectParameter("OrgRegNo", orgRegNo) :
                new ObjectParameter("OrgRegNo", typeof(string));
    
            var durationofFirmParameter = durationofFirm != null ?
                new ObjectParameter("DurationofFirm", durationofFirm) :
                new ObjectParameter("DurationofFirm", typeof(string));
    
            var formADateParameter = formADate.HasValue ?
                new ObjectParameter("FormADate", formADate) :
                new ObjectParameter("FormADate", typeof(System.DateTime));
    
            var formGNoParameter = formGNo != null ?
                new ObjectParameter("FormGNo", formGNo) :
                new ObjectParameter("FormGNo", typeof(string));
    
            var firmStartDateParameter = firmStartDate.HasValue ?
                new ObjectParameter("FirmStartDate", firmStartDate) :
                new ObjectParameter("FirmStartDate", typeof(System.DateTime));
    
            var orgType_IDParameter = orgType_ID.HasValue ?
                new ObjectParameter("OrgType_ID", orgType_ID) :
                new ObjectParameter("OrgType_ID", typeof(int));
    
            var notaryPublicNameParameter = notaryPublicName != null ?
                new ObjectParameter("NotaryPublicName", notaryPublicName) :
                new ObjectParameter("NotaryPublicName", typeof(string));
    
            var notaryLicenseParameter = notaryLicense != null ?
                new ObjectParameter("NotaryLicense", notaryLicense) :
                new ObjectParameter("NotaryLicense", typeof(string));
    
            var agreementDateParameter = agreementDate.HasValue ?
                new ObjectParameter("AgreementDate", agreementDate) :
                new ObjectParameter("AgreementDate", typeof(System.DateTime));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var submissionDateParameter = submissionDate.HasValue ?
                new ObjectParameter("SubmissionDate", submissionDate) :
                new ObjectParameter("SubmissionDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateFirmBaiscInfo", orgIDParameter, orgRegNoParameter, durationofFirmParameter, formADateParameter, formGNoParameter, firmStartDateParameter, orgType_IDParameter, notaryPublicNameParameter, notaryLicenseParameter, agreementDateParameter, user_IDParameter, submissionDateParameter, remarksParameter);
        }
    
        public virtual int usp_UpdateNewOrgDoc(Nullable<long> orgDocID, Nullable<long> org_ID, Nullable<int> document_ID, Nullable<System.DateTime> submissionDate, Nullable<int> user_ID, string documentPath, string issueNo)
        {
            var orgDocIDParameter = orgDocID.HasValue ?
                new ObjectParameter("OrgDocID", orgDocID) :
                new ObjectParameter("OrgDocID", typeof(long));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            var document_IDParameter = document_ID.HasValue ?
                new ObjectParameter("Document_ID", document_ID) :
                new ObjectParameter("Document_ID", typeof(int));
    
            var submissionDateParameter = submissionDate.HasValue ?
                new ObjectParameter("SubmissionDate", submissionDate) :
                new ObjectParameter("SubmissionDate", typeof(System.DateTime));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var documentPathParameter = documentPath != null ?
                new ObjectParameter("DocumentPath", documentPath) :
                new ObjectParameter("DocumentPath", typeof(string));
    
            var issueNoParameter = issueNo != null ?
                new ObjectParameter("IssueNo", issueNo) :
                new ObjectParameter("IssueNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateNewOrgDoc", orgDocIDParameter, org_IDParameter, document_IDParameter, submissionDateParameter, user_IDParameter, documentPathParameter, issueNoParameter);
        }
    
        public virtual int usp_UpdateOrgDocName(Nullable<long> oRGNameID, string orgRegName, Nullable<long> orgDocId, Nullable<int> user_ID)
        {
            var oRGNameIDParameter = oRGNameID.HasValue ?
                new ObjectParameter("ORGNameID", oRGNameID) :
                new ObjectParameter("ORGNameID", typeof(long));
    
            var orgRegNameParameter = orgRegName != null ?
                new ObjectParameter("OrgRegName", orgRegName) :
                new ObjectParameter("OrgRegName", typeof(string));
    
            var orgDocIdParameter = orgDocId.HasValue ?
                new ObjectParameter("OrgDocId", orgDocId) :
                new ObjectParameter("OrgDocId", typeof(long));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateOrgDocName", oRGNameIDParameter, orgRegNameParameter, orgDocIdParameter, user_IDParameter);
        }
    
        public virtual int usp_UpdateOrgType(Nullable<int> orgTypeId, string orgTypeName, Nullable<int> userID)
        {
            var orgTypeIdParameter = orgTypeId.HasValue ?
                new ObjectParameter("OrgTypeId", orgTypeId) :
                new ObjectParameter("OrgTypeId", typeof(int));
    
            var orgTypeNameParameter = orgTypeName != null ?
                new ObjectParameter("OrgTypeName", orgTypeName) :
                new ObjectParameter("OrgTypeName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateOrgType", orgTypeIdParameter, orgTypeNameParameter, userIDParameter);
        }
    
        public virtual int usp_UpdatePartner(Nullable<long> partnerID, string partnerName, string partnerCNIC, string partnerONIC, Nullable<double> partnerShare, string partnerAddress, string partnerContactNo, string partnerMobileNo, string partnerCitizenNo, string partnerPassportNo, Nullable<long> orgDoc_ID, Nullable<int> user_ID, string nICImgPath, Nullable<int> designationID, string occupation, Nullable<int> nationalityID)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(long));
    
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var partnerCNICParameter = partnerCNIC != null ?
                new ObjectParameter("PartnerCNIC", partnerCNIC) :
                new ObjectParameter("PartnerCNIC", typeof(string));
    
            var partnerONICParameter = partnerONIC != null ?
                new ObjectParameter("PartnerONIC", partnerONIC) :
                new ObjectParameter("PartnerONIC", typeof(string));
    
            var partnerShareParameter = partnerShare.HasValue ?
                new ObjectParameter("PartnerShare", partnerShare) :
                new ObjectParameter("PartnerShare", typeof(double));
    
            var partnerAddressParameter = partnerAddress != null ?
                new ObjectParameter("PartnerAddress", partnerAddress) :
                new ObjectParameter("PartnerAddress", typeof(string));
    
            var partnerContactNoParameter = partnerContactNo != null ?
                new ObjectParameter("PartnerContactNo", partnerContactNo) :
                new ObjectParameter("PartnerContactNo", typeof(string));
    
            var partnerMobileNoParameter = partnerMobileNo != null ?
                new ObjectParameter("PartnerMobileNo", partnerMobileNo) :
                new ObjectParameter("PartnerMobileNo", typeof(string));
    
            var partnerCitizenNoParameter = partnerCitizenNo != null ?
                new ObjectParameter("PartnerCitizenNo", partnerCitizenNo) :
                new ObjectParameter("PartnerCitizenNo", typeof(string));
    
            var partnerPassportNoParameter = partnerPassportNo != null ?
                new ObjectParameter("PartnerPassportNo", partnerPassportNo) :
                new ObjectParameter("PartnerPassportNo", typeof(string));
    
            var orgDoc_IDParameter = orgDoc_ID.HasValue ?
                new ObjectParameter("OrgDoc_ID", orgDoc_ID) :
                new ObjectParameter("OrgDoc_ID", typeof(long));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var nICImgPathParameter = nICImgPath != null ?
                new ObjectParameter("NICImgPath", nICImgPath) :
                new ObjectParameter("NICImgPath", typeof(string));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var nationalityIDParameter = nationalityID.HasValue ?
                new ObjectParameter("NationalityID", nationalityID) :
                new ObjectParameter("NationalityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdatePartner", partnerIDParameter, partnerNameParameter, partnerCNICParameter, partnerONICParameter, partnerShareParameter, partnerAddressParameter, partnerContactNoParameter, partnerMobileNoParameter, partnerCitizenNoParameter, partnerPassportNoParameter, orgDoc_IDParameter, user_IDParameter, nICImgPathParameter, designationIDParameter, occupationParameter, nationalityIDParameter);
        }
    
        public virtual int usp_UpdatePrincipalAddress(Nullable<long> adressID, Nullable<long> orgDoc_ID, Nullable<int> adressType_ID, string adressDetails, Nullable<int> tehsil_ID, Nullable<int> user_ID)
        {
            var adressIDParameter = adressID.HasValue ?
                new ObjectParameter("AdressID", adressID) :
                new ObjectParameter("AdressID", typeof(long));
    
            var orgDoc_IDParameter = orgDoc_ID.HasValue ?
                new ObjectParameter("OrgDoc_ID", orgDoc_ID) :
                new ObjectParameter("OrgDoc_ID", typeof(long));
    
            var adressType_IDParameter = adressType_ID.HasValue ?
                new ObjectParameter("AdressType_ID", adressType_ID) :
                new ObjectParameter("AdressType_ID", typeof(int));
    
            var adressDetailsParameter = adressDetails != null ?
                new ObjectParameter("AdressDetails", adressDetails) :
                new ObjectParameter("AdressDetails", typeof(string));
    
            var tehsil_IDParameter = tehsil_ID.HasValue ?
                new ObjectParameter("Tehsil_ID", tehsil_ID) :
                new ObjectParameter("Tehsil_ID", typeof(int));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdatePrincipalAddress", adressIDParameter, orgDoc_IDParameter, adressType_IDParameter, adressDetailsParameter, tehsil_IDParameter, user_IDParameter);
        }
    
        public virtual int usp_UpdateWitness(Nullable<long> witnessID, string witnessName, string witnessCNIC, string witnessONIC, string witnessAddress, string witnessContactNo, string witnessMobileNo, string witnessCitizenNo, string witnessPassportNo, Nullable<long> orgDoc_ID, Nullable<int> user_ID)
        {
            var witnessIDParameter = witnessID.HasValue ?
                new ObjectParameter("WitnessID", witnessID) :
                new ObjectParameter("WitnessID", typeof(long));
    
            var witnessNameParameter = witnessName != null ?
                new ObjectParameter("WitnessName", witnessName) :
                new ObjectParameter("WitnessName", typeof(string));
    
            var witnessCNICParameter = witnessCNIC != null ?
                new ObjectParameter("WitnessCNIC", witnessCNIC) :
                new ObjectParameter("WitnessCNIC", typeof(string));
    
            var witnessONICParameter = witnessONIC != null ?
                new ObjectParameter("WitnessONIC", witnessONIC) :
                new ObjectParameter("WitnessONIC", typeof(string));
    
            var witnessAddressParameter = witnessAddress != null ?
                new ObjectParameter("WitnessAddress", witnessAddress) :
                new ObjectParameter("WitnessAddress", typeof(string));
    
            var witnessContactNoParameter = witnessContactNo != null ?
                new ObjectParameter("WitnessContactNo", witnessContactNo) :
                new ObjectParameter("WitnessContactNo", typeof(string));
    
            var witnessMobileNoParameter = witnessMobileNo != null ?
                new ObjectParameter("WitnessMobileNo", witnessMobileNo) :
                new ObjectParameter("WitnessMobileNo", typeof(string));
    
            var witnessCitizenNoParameter = witnessCitizenNo != null ?
                new ObjectParameter("WitnessCitizenNo", witnessCitizenNo) :
                new ObjectParameter("WitnessCitizenNo", typeof(string));
    
            var witnessPassportNoParameter = witnessPassportNo != null ?
                new ObjectParameter("WitnessPassportNo", witnessPassportNo) :
                new ObjectParameter("WitnessPassportNo", typeof(string));
    
            var orgDoc_IDParameter = orgDoc_ID.HasValue ?
                new ObjectParameter("OrgDoc_ID", orgDoc_ID) :
                new ObjectParameter("OrgDoc_ID", typeof(long));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateWitness", witnessIDParameter, witnessNameParameter, witnessCNICParameter, witnessONICParameter, witnessAddressParameter, witnessContactNoParameter, witnessMobileNoParameter, witnessCitizenNoParameter, witnessPassportNoParameter, orgDoc_IDParameter, user_IDParameter);
        }
    
        public virtual int usp_InsertOrgBusiness()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertOrgBusiness");
        }
    
        public virtual ObjectResult<usp_GetAllFileNames_Result> usp_GetAllFileNames(Nullable<int> orgType)
        {
            var orgTypeParameter = orgType.HasValue ?
                new ObjectParameter("OrgType", orgType) :
                new ObjectParameter("OrgType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllFileNames_Result>("usp_GetAllFileNames", orgTypeParameter);
        }
    
        public virtual int usp_InsertFormBAlterAdress(Nullable<long> orgId, Nullable<long> oldAdressId, Nullable<int> adressType_ID, string addressDetails, Nullable<int> tehsil_ID, Nullable<System.DateTime> formBSubmissionDate, string formBDocPath, string newFormHIssueNo, Nullable<System.DateTime> newFormHIssueDate, string newFormHDocPath, Nullable<int> user_ID, ObjectParameter orgDocID)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(long));
    
            var oldAdressIdParameter = oldAdressId.HasValue ?
                new ObjectParameter("OldAdressId", oldAdressId) :
                new ObjectParameter("OldAdressId", typeof(long));
    
            var adressType_IDParameter = adressType_ID.HasValue ?
                new ObjectParameter("AdressType_ID", adressType_ID) :
                new ObjectParameter("AdressType_ID", typeof(int));
    
            var addressDetailsParameter = addressDetails != null ?
                new ObjectParameter("AddressDetails", addressDetails) :
                new ObjectParameter("AddressDetails", typeof(string));
    
            var tehsil_IDParameter = tehsil_ID.HasValue ?
                new ObjectParameter("Tehsil_ID", tehsil_ID) :
                new ObjectParameter("Tehsil_ID", typeof(int));
    
            var formBSubmissionDateParameter = formBSubmissionDate.HasValue ?
                new ObjectParameter("FormBSubmissionDate", formBSubmissionDate) :
                new ObjectParameter("FormBSubmissionDate", typeof(System.DateTime));
    
            var formBDocPathParameter = formBDocPath != null ?
                new ObjectParameter("FormBDocPath", formBDocPath) :
                new ObjectParameter("FormBDocPath", typeof(string));
    
            var newFormHIssueNoParameter = newFormHIssueNo != null ?
                new ObjectParameter("NewFormHIssueNo", newFormHIssueNo) :
                new ObjectParameter("NewFormHIssueNo", typeof(string));
    
            var newFormHIssueDateParameter = newFormHIssueDate.HasValue ?
                new ObjectParameter("NewFormHIssueDate", newFormHIssueDate) :
                new ObjectParameter("NewFormHIssueDate", typeof(System.DateTime));
    
            var newFormHDocPathParameter = newFormHDocPath != null ?
                new ObjectParameter("NewFormHDocPath", newFormHDocPath) :
                new ObjectParameter("NewFormHDocPath", typeof(string));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertFormBAlterAdress", orgIdParameter, oldAdressIdParameter, adressType_IDParameter, addressDetailsParameter, tehsil_IDParameter, formBSubmissionDateParameter, formBDocPathParameter, newFormHIssueNoParameter, newFormHIssueDateParameter, newFormHDocPathParameter, user_IDParameter, orgDocID);
        }
    
        public virtual int usp_InsertFormBAlterName(Nullable<long> orgId, string orgRegName, Nullable<System.DateTime> formBSubmissionDate, string formBDocPath, string newFormHIssueNo, Nullable<System.DateTime> newFormHIssueDate, string newFormHDocPath, Nullable<int> user_ID, ObjectParameter orgDocID)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(long));
    
            var orgRegNameParameter = orgRegName != null ?
                new ObjectParameter("OrgRegName", orgRegName) :
                new ObjectParameter("OrgRegName", typeof(string));
    
            var formBSubmissionDateParameter = formBSubmissionDate.HasValue ?
                new ObjectParameter("FormBSubmissionDate", formBSubmissionDate) :
                new ObjectParameter("FormBSubmissionDate", typeof(System.DateTime));
    
            var formBDocPathParameter = formBDocPath != null ?
                new ObjectParameter("FormBDocPath", formBDocPath) :
                new ObjectParameter("FormBDocPath", typeof(string));
    
            var newFormHIssueNoParameter = newFormHIssueNo != null ?
                new ObjectParameter("NewFormHIssueNo", newFormHIssueNo) :
                new ObjectParameter("NewFormHIssueNo", typeof(string));
    
            var newFormHIssueDateParameter = newFormHIssueDate.HasValue ?
                new ObjectParameter("NewFormHIssueDate", newFormHIssueDate) :
                new ObjectParameter("NewFormHIssueDate", typeof(System.DateTime));
    
            var newFormHDocPathParameter = newFormHDocPath != null ?
                new ObjectParameter("NewFormHDocPath", newFormHDocPath) :
                new ObjectParameter("NewFormHDocPath", typeof(string));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertFormBAlterName", orgIdParameter, orgRegNameParameter, formBSubmissionDateParameter, formBDocPathParameter, newFormHIssueNoParameter, newFormHIssueDateParameter, newFormHDocPathParameter, user_IDParameter, orgDocID);
        }
    
        public virtual int usp_InsertFormBAlterNamenAdressBoth(Nullable<long> orgId, Nullable<long> oldFormHId, string orgRegName, Nullable<int> adressType_ID, string addressDetails, Nullable<int> tehsil_ID, Nullable<System.DateTime> formBSubmissionDate, string formBDocPath, string newFormHIssueNo, Nullable<System.DateTime> newFormHIssueDate, string newFormHDocPath, Nullable<int> user_ID, ObjectParameter orgDocID)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(long));
    
            var oldFormHIdParameter = oldFormHId.HasValue ?
                new ObjectParameter("OldFormHId", oldFormHId) :
                new ObjectParameter("OldFormHId", typeof(long));
    
            var orgRegNameParameter = orgRegName != null ?
                new ObjectParameter("OrgRegName", orgRegName) :
                new ObjectParameter("OrgRegName", typeof(string));
    
            var adressType_IDParameter = adressType_ID.HasValue ?
                new ObjectParameter("AdressType_ID", adressType_ID) :
                new ObjectParameter("AdressType_ID", typeof(int));
    
            var addressDetailsParameter = addressDetails != null ?
                new ObjectParameter("AddressDetails", addressDetails) :
                new ObjectParameter("AddressDetails", typeof(string));
    
            var tehsil_IDParameter = tehsil_ID.HasValue ?
                new ObjectParameter("Tehsil_ID", tehsil_ID) :
                new ObjectParameter("Tehsil_ID", typeof(int));
    
            var formBSubmissionDateParameter = formBSubmissionDate.HasValue ?
                new ObjectParameter("FormBSubmissionDate", formBSubmissionDate) :
                new ObjectParameter("FormBSubmissionDate", typeof(System.DateTime));
    
            var formBDocPathParameter = formBDocPath != null ?
                new ObjectParameter("FormBDocPath", formBDocPath) :
                new ObjectParameter("FormBDocPath", typeof(string));
    
            var newFormHIssueNoParameter = newFormHIssueNo != null ?
                new ObjectParameter("NewFormHIssueNo", newFormHIssueNo) :
                new ObjectParameter("NewFormHIssueNo", typeof(string));
    
            var newFormHIssueDateParameter = newFormHIssueDate.HasValue ?
                new ObjectParameter("NewFormHIssueDate", newFormHIssueDate) :
                new ObjectParameter("NewFormHIssueDate", typeof(System.DateTime));
    
            var newFormHDocPathParameter = newFormHDocPath != null ?
                new ObjectParameter("NewFormHDocPath", newFormHDocPath) :
                new ObjectParameter("NewFormHDocPath", typeof(string));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertFormBAlterNamenAdressBoth", orgIdParameter, oldFormHIdParameter, orgRegNameParameter, adressType_IDParameter, addressDetailsParameter, tehsil_IDParameter, formBSubmissionDateParameter, formBDocPathParameter, newFormHIssueNoParameter, newFormHIssueDateParameter, newFormHDocPathParameter, user_IDParameter, orgDocID);
        }
    
        public virtual ObjectResult<usp_GetAddressesofOrgnaizationUsingFileNo_Result> usp_GetAddressesofOrgnaizationUsingFileNo(string fileNo, Nullable<bool> showAll)
        {
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var showAllParameter = showAll.HasValue ?
                new ObjectParameter("ShowAll", showAll) :
                new ObjectParameter("ShowAll", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAddressesofOrgnaizationUsingFileNo_Result>("usp_GetAddressesofOrgnaizationUsingFileNo", fileNoParameter, showAllParameter);
        }
    
        public virtual ObjectResult<usp_GetOrganizaionUsingOrgName_Result> usp_GetOrganizaionUsingOrgName(string orgName)
        {
            var orgNameParameter = orgName != null ?
                new ObjectParameter("OrgName", orgName) :
                new ObjectParameter("OrgName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetOrganizaionUsingOrgName_Result>("usp_GetOrganizaionUsingOrgName", orgNameParameter);
        }
    
        public virtual ObjectResult<usp_GetOrganizationNameUsingFileNo_Result> usp_GetOrganizationNameUsingFileNo(string fileNo, Nullable<bool> showAll)
        {
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var showAllParameter = showAll.HasValue ?
                new ObjectParameter("ShowAll", showAll) :
                new ObjectParameter("ShowAll", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetOrganizationNameUsingFileNo_Result>("usp_GetOrganizationNameUsingFileNo", fileNoParameter, showAllParameter);
        }
    
        public virtual ObjectResult<usp_GetPartnersofOrganizationUsingFileNo_Result> usp_GetPartnersofOrganizationUsingFileNo(string fileNo, Nullable<bool> showAll)
        {
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var showAllParameter = showAll.HasValue ?
                new ObjectParameter("ShowAll", showAll) :
                new ObjectParameter("ShowAll", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPartnersofOrganizationUsingFileNo_Result>("usp_GetPartnersofOrganizationUsingFileNo", fileNoParameter, showAllParameter);
        }
    
        public virtual ObjectResult<usp_GetWitnessesofOrganizationUsingFileNo_Result> usp_GetWitnessesofOrganizationUsingFileNo(string fileNo, Nullable<bool> showAll)
        {
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var showAllParameter = showAll.HasValue ?
                new ObjectParameter("ShowAll", showAll) :
                new ObjectParameter("ShowAll", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetWitnessesofOrganizationUsingFileNo_Result>("usp_GetWitnessesofOrganizationUsingFileNo", fileNoParameter, showAllParameter);
        }
    
        public virtual int usp_InsertFeeTransaction(Nullable<long> org_ID, string challanNo, Nullable<decimal> challanAmount, Nullable<int> feeType_ID, Nullable<int> bankDistrict_ID, Nullable<System.DateTime> feeDate, Nullable<int> user_ID)
        {
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            var challanNoParameter = challanNo != null ?
                new ObjectParameter("ChallanNo", challanNo) :
                new ObjectParameter("ChallanNo", typeof(string));
    
            var challanAmountParameter = challanAmount.HasValue ?
                new ObjectParameter("ChallanAmount", challanAmount) :
                new ObjectParameter("ChallanAmount", typeof(decimal));
    
            var feeType_IDParameter = feeType_ID.HasValue ?
                new ObjectParameter("FeeType_ID", feeType_ID) :
                new ObjectParameter("FeeType_ID", typeof(int));
    
            var bankDistrict_IDParameter = bankDistrict_ID.HasValue ?
                new ObjectParameter("BankDistrict_ID", bankDistrict_ID) :
                new ObjectParameter("BankDistrict_ID", typeof(int));
    
            var feeDateParameter = feeDate.HasValue ?
                new ObjectParameter("FeeDate", feeDate) :
                new ObjectParameter("FeeDate", typeof(System.DateTime));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertFeeTransaction", org_IDParameter, challanNoParameter, challanAmountParameter, feeType_IDParameter, bankDistrict_IDParameter, feeDateParameter, user_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> usp_SelectLastIdofOrgDocument(Nullable<long> orgID, Nullable<int> docID)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(long));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("usp_SelectLastIdofOrgDocument", orgIDParameter, docIDParameter);
        }
    
        public virtual ObjectResult<usp_SelectOrgBasicInfo_Result> usp_SelectOrgBasicInfo(string fileNo, Nullable<long> orgID)
        {
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectOrgBasicInfo_Result>("usp_SelectOrgBasicInfo", fileNoParameter, orgIDParameter);
        }
    
        public virtual int usp_UpdateFeeTransaction(Nullable<long> transactionID, Nullable<long> org_ID, string challanNo, Nullable<decimal> challanAmount, Nullable<int> feeType_ID, Nullable<int> bankDistrict_ID, Nullable<System.DateTime> feeDate, Nullable<int> user_ID)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(long));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            var challanNoParameter = challanNo != null ?
                new ObjectParameter("ChallanNo", challanNo) :
                new ObjectParameter("ChallanNo", typeof(string));
    
            var challanAmountParameter = challanAmount.HasValue ?
                new ObjectParameter("ChallanAmount", challanAmount) :
                new ObjectParameter("ChallanAmount", typeof(decimal));
    
            var feeType_IDParameter = feeType_ID.HasValue ?
                new ObjectParameter("FeeType_ID", feeType_ID) :
                new ObjectParameter("FeeType_ID", typeof(int));
    
            var bankDistrict_IDParameter = bankDistrict_ID.HasValue ?
                new ObjectParameter("BankDistrict_ID", bankDistrict_ID) :
                new ObjectParameter("BankDistrict_ID", typeof(int));
    
            var feeDateParameter = feeDate.HasValue ?
                new ObjectParameter("FeeDate", feeDate) :
                new ObjectParameter("FeeDate", typeof(System.DateTime));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateFeeTransaction", transactionIDParameter, org_IDParameter, challanNoParameter, challanAmountParameter, feeType_IDParameter, bankDistrict_IDParameter, feeDateParameter, user_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetDistrictIDofTehsil(Nullable<int> tehsilId)
        {
            var tehsilIdParameter = tehsilId.HasValue ?
                new ObjectParameter("TehsilId", tehsilId) :
                new ObjectParameter("TehsilId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetDistrictIDofTehsil", tehsilIdParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> usp_GetLastNameIDofanOrganization(Nullable<long> orgID)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("usp_GetLastNameIDofanOrganization", orgIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAddresssForEdit_Result> usp_GetAddresssForEdit(Nullable<int> adressID)
        {
            var adressIDParameter = adressID.HasValue ?
                new ObjectParameter("AdressID", adressID) :
                new ObjectParameter("AdressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAddresssForEdit_Result>("usp_GetAddresssForEdit", adressIDParameter);
        }
    
        public virtual int usp_DeactivePartnersforAlteration(Nullable<long> orgId, Nullable<int> user_ID, ObjectParameter oldOrgDocID)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(long));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeactivePartnersforAlteration", orgIdParameter, user_IDParameter, oldOrgDocID);
        }
    
        public virtual ObjectResult<usp_GetOrganizationInfoofPerson_Result> usp_GetOrganizationInfoofPerson(string personName, string nic)
        {
            var personNameParameter = personName != null ?
                new ObjectParameter("PersonName", personName) :
                new ObjectParameter("PersonName", typeof(string));
    
            var nicParameter = nic != null ?
                new ObjectParameter("Nic", nic) :
                new ObjectParameter("Nic", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetOrganizationInfoofPerson_Result>("usp_GetOrganizationInfoofPerson", personNameParameter, nicParameter);
        }
    
        public virtual ObjectResult<usp_GetPrimaryAdressIDofanOrg_Result> usp_GetPrimaryAdressIDofanOrg(Nullable<int> orgID)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPrimaryAdressIDofanOrg_Result>("usp_GetPrimaryAdressIDofanOrg", orgIDParameter);
        }
    
        public virtual int CompareUserNamePwd(string username, string pwd, ObjectParameter userID, ObjectParameter roleName)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("Pwd", pwd) :
                new ObjectParameter("Pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompareUserNamePwd", usernameParameter, pwdParameter, userID, roleName);
        }
    
        public virtual ObjectResult<GetAllRoles_Result> GetAllRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRoles_Result>("GetAllRoles");
        }
    
        public virtual int usp_InsertNewRole(string roleName)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewRole", roleNameParameter);
        }
    
        public virtual int usp_InsertNewUserWithRole(string username, string pwd, string useremail, string usercontactno, Nullable<int> roleId)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("Pwd", pwd) :
                new ObjectParameter("Pwd", typeof(string));
    
            var useremailParameter = useremail != null ?
                new ObjectParameter("Useremail", useremail) :
                new ObjectParameter("Useremail", typeof(string));
    
            var usercontactnoParameter = usercontactno != null ?
                new ObjectParameter("Usercontactno", usercontactno) :
                new ObjectParameter("Usercontactno", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewUserWithRole", usernameParameter, pwdParameter, useremailParameter, usercontactnoParameter, roleIdParameter);
        }
    
        public virtual int usp_InsertFormEnHEntry(Nullable<long> orgId, Nullable<System.DateTime> formESubmissionDate, string formEDocPath, string newFormHIssueNo, Nullable<System.DateTime> newFormHIssueDate, string newFormHDocPath, Nullable<int> user_ID, ObjectParameter orgDocID)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(long));
    
            var formESubmissionDateParameter = formESubmissionDate.HasValue ?
                new ObjectParameter("FormESubmissionDate", formESubmissionDate) :
                new ObjectParameter("FormESubmissionDate", typeof(System.DateTime));
    
            var formEDocPathParameter = formEDocPath != null ?
                new ObjectParameter("FormEDocPath", formEDocPath) :
                new ObjectParameter("FormEDocPath", typeof(string));
    
            var newFormHIssueNoParameter = newFormHIssueNo != null ?
                new ObjectParameter("NewFormHIssueNo", newFormHIssueNo) :
                new ObjectParameter("NewFormHIssueNo", typeof(string));
    
            var newFormHIssueDateParameter = newFormHIssueDate.HasValue ?
                new ObjectParameter("NewFormHIssueDate", newFormHIssueDate) :
                new ObjectParameter("NewFormHIssueDate", typeof(System.DateTime));
    
            var newFormHDocPathParameter = newFormHDocPath != null ?
                new ObjectParameter("NewFormHDocPath", newFormHDocPath) :
                new ObjectParameter("NewFormHDocPath", typeof(string));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertFormEnHEntry", orgIdParameter, formESubmissionDateParameter, formEDocPathParameter, newFormHIssueNoParameter, newFormHIssueDateParameter, newFormHDocPathParameter, user_IDParameter, orgDocID);
        }
    
        public virtual int usp_UndoDeactivePartner(Nullable<long> oDID)
        {
            var oDIDParameter = oDID.HasValue ?
                new ObjectParameter("ODID", oDID) :
                new ObjectParameter("ODID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UndoDeactivePartner", oDIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPartnersUsingOrgDocId_Result> usp_GetPartnersUsingOrgDocId(Nullable<long> orgDocID)
        {
            var orgDocIDParameter = orgDocID.HasValue ?
                new ObjectParameter("OrgDocID", orgDocID) :
                new ObjectParameter("OrgDocID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPartnersUsingOrgDocId_Result>("usp_GetPartnersUsingOrgDocId", orgDocIDParameter);
        }
    
        public virtual int usp_InsertMadrassa(string orgRegNo, string durationofFirm, Nullable<System.DateTime> formADate, string challanNo, Nullable<decimal> challanAmount, string formGNo, Nullable<System.DateTime> madrassaStartDate, Nullable<int> orgType_ID, string notaryPublicName, string notaryLicense, Nullable<System.DateTime> memoDate, Nullable<int> user_ID, string madrassaName, string issueNo, Nullable<int> docID, Nullable<System.DateTime> submissionDate, string docPath, ObjectParameter orgID, ObjectParameter orgDocID, Nullable<System.DateTime> formHIssueDate, string formHPath, string formMemoPath, string remarks, Nullable<int> bankDistrict_ID, Nullable<System.DateTime> feeDate, string objectives, Nullable<int> sectType, Nullable<System.DateTime> executionDate, Nullable<System.DateTime> licenseIssueDate, Nullable<int> bankID)
        {
            var orgRegNoParameter = orgRegNo != null ?
                new ObjectParameter("OrgRegNo", orgRegNo) :
                new ObjectParameter("OrgRegNo", typeof(string));
    
            var durationofFirmParameter = durationofFirm != null ?
                new ObjectParameter("DurationofFirm", durationofFirm) :
                new ObjectParameter("DurationofFirm", typeof(string));
    
            var formADateParameter = formADate.HasValue ?
                new ObjectParameter("FormADate", formADate) :
                new ObjectParameter("FormADate", typeof(System.DateTime));
    
            var challanNoParameter = challanNo != null ?
                new ObjectParameter("ChallanNo", challanNo) :
                new ObjectParameter("ChallanNo", typeof(string));
    
            var challanAmountParameter = challanAmount.HasValue ?
                new ObjectParameter("ChallanAmount", challanAmount) :
                new ObjectParameter("ChallanAmount", typeof(decimal));
    
            var formGNoParameter = formGNo != null ?
                new ObjectParameter("FormGNo", formGNo) :
                new ObjectParameter("FormGNo", typeof(string));
    
            var madrassaStartDateParameter = madrassaStartDate.HasValue ?
                new ObjectParameter("MadrassaStartDate", madrassaStartDate) :
                new ObjectParameter("MadrassaStartDate", typeof(System.DateTime));
    
            var orgType_IDParameter = orgType_ID.HasValue ?
                new ObjectParameter("OrgType_ID", orgType_ID) :
                new ObjectParameter("OrgType_ID", typeof(int));
    
            var notaryPublicNameParameter = notaryPublicName != null ?
                new ObjectParameter("NotaryPublicName", notaryPublicName) :
                new ObjectParameter("NotaryPublicName", typeof(string));
    
            var notaryLicenseParameter = notaryLicense != null ?
                new ObjectParameter("NotaryLicense", notaryLicense) :
                new ObjectParameter("NotaryLicense", typeof(string));
    
            var memoDateParameter = memoDate.HasValue ?
                new ObjectParameter("MemoDate", memoDate) :
                new ObjectParameter("MemoDate", typeof(System.DateTime));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var madrassaNameParameter = madrassaName != null ?
                new ObjectParameter("MadrassaName", madrassaName) :
                new ObjectParameter("MadrassaName", typeof(string));
    
            var issueNoParameter = issueNo != null ?
                new ObjectParameter("IssueNo", issueNo) :
                new ObjectParameter("IssueNo", typeof(string));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var submissionDateParameter = submissionDate.HasValue ?
                new ObjectParameter("SubmissionDate", submissionDate) :
                new ObjectParameter("SubmissionDate", typeof(System.DateTime));
    
            var docPathParameter = docPath != null ?
                new ObjectParameter("DocPath", docPath) :
                new ObjectParameter("DocPath", typeof(string));
    
            var formHIssueDateParameter = formHIssueDate.HasValue ?
                new ObjectParameter("FormHIssueDate", formHIssueDate) :
                new ObjectParameter("FormHIssueDate", typeof(System.DateTime));
    
            var formHPathParameter = formHPath != null ?
                new ObjectParameter("FormHPath", formHPath) :
                new ObjectParameter("FormHPath", typeof(string));
    
            var formMemoPathParameter = formMemoPath != null ?
                new ObjectParameter("FormMemoPath", formMemoPath) :
                new ObjectParameter("FormMemoPath", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var bankDistrict_IDParameter = bankDistrict_ID.HasValue ?
                new ObjectParameter("BankDistrict_ID", bankDistrict_ID) :
                new ObjectParameter("BankDistrict_ID", typeof(int));
    
            var feeDateParameter = feeDate.HasValue ?
                new ObjectParameter("FeeDate", feeDate) :
                new ObjectParameter("FeeDate", typeof(System.DateTime));
    
            var objectivesParameter = objectives != null ?
                new ObjectParameter("Objectives", objectives) :
                new ObjectParameter("Objectives", typeof(string));
    
            var sectTypeParameter = sectType.HasValue ?
                new ObjectParameter("SectType", sectType) :
                new ObjectParameter("SectType", typeof(int));
    
            var executionDateParameter = executionDate.HasValue ?
                new ObjectParameter("ExecutionDate", executionDate) :
                new ObjectParameter("ExecutionDate", typeof(System.DateTime));
    
            var licenseIssueDateParameter = licenseIssueDate.HasValue ?
                new ObjectParameter("LicenseIssueDate", licenseIssueDate) :
                new ObjectParameter("LicenseIssueDate", typeof(System.DateTime));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertMadrassa", orgRegNoParameter, durationofFirmParameter, formADateParameter, challanNoParameter, challanAmountParameter, formGNoParameter, madrassaStartDateParameter, orgType_IDParameter, notaryPublicNameParameter, notaryLicenseParameter, memoDateParameter, user_IDParameter, madrassaNameParameter, issueNoParameter, docIDParameter, submissionDateParameter, docPathParameter, orgID, orgDocID, formHIssueDateParameter, formHPathParameter, formMemoPathParameter, remarksParameter, bankDistrict_IDParameter, feeDateParameter, objectivesParameter, sectTypeParameter, executionDateParameter, licenseIssueDateParameter, bankIDParameter);
        }
    
        public virtual int usp_InsertSocietyNGO(string orgRegNo, string durationofFirm, Nullable<System.DateTime> formADate, string challanNo, Nullable<decimal> challanAmount, string formGNo, Nullable<System.DateTime> societyStartDate, Nullable<int> orgType_ID, string notaryPublicName, string notaryLicense, Nullable<System.DateTime> memoDate, Nullable<int> user_ID, string societyName, string issueNo, Nullable<int> docID, Nullable<System.DateTime> submissionDate, string docPath, ObjectParameter orgID, ObjectParameter orgDocID, Nullable<System.DateTime> formHIssueDate, string formHPath, string formMemoPath, string remarks, Nullable<int> bankDistrict_ID, Nullable<System.DateTime> feeDate, string objectives, Nullable<int> societyType, Nullable<System.DateTime> executionDate, Nullable<System.DateTime> licenseIssueDate, Nullable<int> bankID)
        {
            var orgRegNoParameter = orgRegNo != null ?
                new ObjectParameter("OrgRegNo", orgRegNo) :
                new ObjectParameter("OrgRegNo", typeof(string));
    
            var durationofFirmParameter = durationofFirm != null ?
                new ObjectParameter("DurationofFirm", durationofFirm) :
                new ObjectParameter("DurationofFirm", typeof(string));
    
            var formADateParameter = formADate.HasValue ?
                new ObjectParameter("FormADate", formADate) :
                new ObjectParameter("FormADate", typeof(System.DateTime));
    
            var challanNoParameter = challanNo != null ?
                new ObjectParameter("ChallanNo", challanNo) :
                new ObjectParameter("ChallanNo", typeof(string));
    
            var challanAmountParameter = challanAmount.HasValue ?
                new ObjectParameter("ChallanAmount", challanAmount) :
                new ObjectParameter("ChallanAmount", typeof(decimal));
    
            var formGNoParameter = formGNo != null ?
                new ObjectParameter("FormGNo", formGNo) :
                new ObjectParameter("FormGNo", typeof(string));
    
            var societyStartDateParameter = societyStartDate.HasValue ?
                new ObjectParameter("SocietyStartDate", societyStartDate) :
                new ObjectParameter("SocietyStartDate", typeof(System.DateTime));
    
            var orgType_IDParameter = orgType_ID.HasValue ?
                new ObjectParameter("OrgType_ID", orgType_ID) :
                new ObjectParameter("OrgType_ID", typeof(int));
    
            var notaryPublicNameParameter = notaryPublicName != null ?
                new ObjectParameter("NotaryPublicName", notaryPublicName) :
                new ObjectParameter("NotaryPublicName", typeof(string));
    
            var notaryLicenseParameter = notaryLicense != null ?
                new ObjectParameter("NotaryLicense", notaryLicense) :
                new ObjectParameter("NotaryLicense", typeof(string));
    
            var memoDateParameter = memoDate.HasValue ?
                new ObjectParameter("MemoDate", memoDate) :
                new ObjectParameter("MemoDate", typeof(System.DateTime));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var societyNameParameter = societyName != null ?
                new ObjectParameter("SocietyName", societyName) :
                new ObjectParameter("SocietyName", typeof(string));
    
            var issueNoParameter = issueNo != null ?
                new ObjectParameter("IssueNo", issueNo) :
                new ObjectParameter("IssueNo", typeof(string));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var submissionDateParameter = submissionDate.HasValue ?
                new ObjectParameter("SubmissionDate", submissionDate) :
                new ObjectParameter("SubmissionDate", typeof(System.DateTime));
    
            var docPathParameter = docPath != null ?
                new ObjectParameter("DocPath", docPath) :
                new ObjectParameter("DocPath", typeof(string));
    
            var formHIssueDateParameter = formHIssueDate.HasValue ?
                new ObjectParameter("FormHIssueDate", formHIssueDate) :
                new ObjectParameter("FormHIssueDate", typeof(System.DateTime));
    
            var formHPathParameter = formHPath != null ?
                new ObjectParameter("FormHPath", formHPath) :
                new ObjectParameter("FormHPath", typeof(string));
    
            var formMemoPathParameter = formMemoPath != null ?
                new ObjectParameter("FormMemoPath", formMemoPath) :
                new ObjectParameter("FormMemoPath", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var bankDistrict_IDParameter = bankDistrict_ID.HasValue ?
                new ObjectParameter("BankDistrict_ID", bankDistrict_ID) :
                new ObjectParameter("BankDistrict_ID", typeof(int));
    
            var feeDateParameter = feeDate.HasValue ?
                new ObjectParameter("FeeDate", feeDate) :
                new ObjectParameter("FeeDate", typeof(System.DateTime));
    
            var objectivesParameter = objectives != null ?
                new ObjectParameter("Objectives", objectives) :
                new ObjectParameter("Objectives", typeof(string));
    
            var societyTypeParameter = societyType.HasValue ?
                new ObjectParameter("SocietyType", societyType) :
                new ObjectParameter("SocietyType", typeof(int));
    
            var executionDateParameter = executionDate.HasValue ?
                new ObjectParameter("ExecutionDate", executionDate) :
                new ObjectParameter("ExecutionDate", typeof(System.DateTime));
    
            var licenseIssueDateParameter = licenseIssueDate.HasValue ?
                new ObjectParameter("LicenseIssueDate", licenseIssueDate) :
                new ObjectParameter("LicenseIssueDate", typeof(System.DateTime));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertSocietyNGO", orgRegNoParameter, durationofFirmParameter, formADateParameter, challanNoParameter, challanAmountParameter, formGNoParameter, societyStartDateParameter, orgType_IDParameter, notaryPublicNameParameter, notaryLicenseParameter, memoDateParameter, user_IDParameter, societyNameParameter, issueNoParameter, docIDParameter, submissionDateParameter, docPathParameter, orgID, orgDocID, formHIssueDateParameter, formHPathParameter, formMemoPathParameter, remarksParameter, bankDistrict_IDParameter, feeDateParameter, objectivesParameter, societyTypeParameter, executionDateParameter, licenseIssueDateParameter, bankIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAllBAnks_Result> usp_GetAllBAnks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllBAnks_Result>("usp_GetAllBAnks");
        }
    
        public virtual ObjectResult<usp_GetAllMadrassa_Result> usp_GetAllMadrassa()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllMadrassa_Result>("usp_GetAllMadrassa");
        }
    
        public virtual ObjectResult<usp_GetAllSocietyNGO_Result> usp_GetAllSocietyNGO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllSocietyNGO_Result>("usp_GetAllSocietyNGO");
        }
    
        public virtual ObjectResult<usp_GetAllFileNamesForMadrassa_Result> usp_GetAllFileNamesForMadrassa()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllFileNamesForMadrassa_Result>("usp_GetAllFileNamesForMadrassa");
        }
    
        public virtual ObjectResult<usp_GetAllFileNamesForSocietyNGO_Result> usp_GetAllFileNamesForSocietyNGO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllFileNamesForSocietyNGO_Result>("usp_GetAllFileNamesForSocietyNGO");
        }
    
        public virtual ObjectResult<usp_GetAddressesofOrgType_Result> usp_GetAddressesofOrgType(Nullable<int> orgTypeID)
        {
            var orgTypeIDParameter = orgTypeID.HasValue ?
                new ObjectParameter("OrgTypeID", orgTypeID) :
                new ObjectParameter("OrgTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAddressesofOrgType_Result>("usp_GetAddressesofOrgType", orgTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPartnersofOrgType_Result> usp_GetPartnersofOrgType(Nullable<int> orgTypeID)
        {
            var orgTypeIDParameter = orgTypeID.HasValue ?
                new ObjectParameter("OrgTypeID", orgTypeID) :
                new ObjectParameter("OrgTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPartnersofOrgType_Result>("usp_GetPartnersofOrgType", orgTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetWitnessesofOrgType_Result> usp_GetWitnessesofOrgType(Nullable<int> orgTypeID)
        {
            var orgTypeIDParameter = orgTypeID.HasValue ?
                new ObjectParameter("OrgTypeID", orgTypeID) :
                new ObjectParameter("OrgTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetWitnessesofOrgType_Result>("usp_GetWitnessesofOrgType", orgTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetOrganizationRegisteredBwDates_Result> usp_GetOrganizationRegisteredBwDates(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> orgTypeID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var orgTypeIDParameter = orgTypeID.HasValue ?
                new ObjectParameter("OrgTypeID", orgTypeID) :
                new ObjectParameter("OrgTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetOrganizationRegisteredBwDates_Result>("usp_GetOrganizationRegisteredBwDates", fromDateParameter, toDateParameter, orgTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetRegisteredOrgsCount_Result> usp_GetRegisteredOrgsCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRegisteredOrgsCount_Result>("usp_GetRegisteredOrgsCount");
        }
    
        public virtual ObjectResult<string> usp_ReportGetBusinessTypesofFirm(string fileNo)
        {
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_ReportGetBusinessTypesofFirm", fileNoParameter);
        }
    
        public virtual ObjectResult<usp_ReportGetOrgInfoUsingFileNo_Result> usp_ReportGetOrgInfoUsingFileNo(string fileNo)
        {
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ReportGetOrgInfoUsingFileNo_Result>("usp_ReportGetOrgInfoUsingFileNo", fileNoParameter);
        }
    
        public virtual int sp_alterdiagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition1_Result> sp_helpdiagramdefinition1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition1_Result>("sp_helpdiagramdefinition1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams1_Result> sp_helpdiagrams1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams1_Result>("sp_helpdiagrams1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram1(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram1", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams1");
        }
    
        public virtual ObjectResult<usp_GetPartnersUsingOrgIdForMadrassa_Result> usp_GetPartnersUsingOrgIdForMadrassa(Nullable<long> orgId, Nullable<long> document_ID)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(long));
    
            var document_IDParameter = document_ID.HasValue ?
                new ObjectParameter("Document_ID", document_ID) :
                new ObjectParameter("Document_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPartnersUsingOrgIdForMadrassa_Result>("usp_GetPartnersUsingOrgIdForMadrassa", orgIdParameter, document_IDParameter);
        }
    
        public virtual ObjectResult<checkprocedureandtablechages_Result> checkprocedureandtablechages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<checkprocedureandtablechages_Result>("checkprocedureandtablechages");
        }
    
        public virtual int usp_InsertAssetofOrg(string assetName, Nullable<int> assetType, Nullable<decimal> assetValue, Nullable<System.DateTime> purchaseDate, Nullable<int> enterByUser_ID, Nullable<long> org_ID)
        {
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetValueParameter = assetValue.HasValue ?
                new ObjectParameter("AssetValue", assetValue) :
                new ObjectParameter("AssetValue", typeof(decimal));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var enterByUser_IDParameter = enterByUser_ID.HasValue ?
                new ObjectParameter("EnterByUser_ID", enterByUser_ID) :
                new ObjectParameter("EnterByUser_ID", typeof(int));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertAssetofOrg", assetNameParameter, assetTypeParameter, assetValueParameter, purchaseDateParameter, enterByUser_IDParameter, org_IDParameter);
        }
    
        public virtual int usp_InsertAssociationofOrg(Nullable<int> associationType, string associationTitle, Nullable<System.DateTime> associationDate, string duration, Nullable<System.DateTime> expiryDate, Nullable<int> enteredByUser_ID, Nullable<bool> isActive, Nullable<long> org_ID)
        {
            var associationTypeParameter = associationType.HasValue ?
                new ObjectParameter("AssociationType", associationType) :
                new ObjectParameter("AssociationType", typeof(int));
    
            var associationTitleParameter = associationTitle != null ?
                new ObjectParameter("AssociationTitle", associationTitle) :
                new ObjectParameter("AssociationTitle", typeof(string));
    
            var associationDateParameter = associationDate.HasValue ?
                new ObjectParameter("AssociationDate", associationDate) :
                new ObjectParameter("AssociationDate", typeof(System.DateTime));
    
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var enteredByUser_IDParameter = enteredByUser_ID.HasValue ?
                new ObjectParameter("EnteredByUser_ID", enteredByUser_ID) :
                new ObjectParameter("EnteredByUser_ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertAssociationofOrg", associationTypeParameter, associationTitleParameter, associationDateParameter, durationParameter, expiryDateParameter, enteredByUser_IDParameter, isActiveParameter, org_IDParameter);
        }
    
        public virtual int usp_InsertBankAccountofOrg(string accountTitle, Nullable<int> bank_ID, string branchCode, Nullable<System.DateTime> creationDate, Nullable<int> enteredByUser_ID, Nullable<int> modifyByUser_ID, Nullable<bool> isActive, Nullable<long> org_ID)
        {
            var accountTitleParameter = accountTitle != null ?
                new ObjectParameter("AccountTitle", accountTitle) :
                new ObjectParameter("AccountTitle", typeof(string));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(int));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var enteredByUser_IDParameter = enteredByUser_ID.HasValue ?
                new ObjectParameter("EnteredByUser_ID", enteredByUser_ID) :
                new ObjectParameter("EnteredByUser_ID", typeof(int));
    
            var modifyByUser_IDParameter = modifyByUser_ID.HasValue ?
                new ObjectParameter("ModifyByUser_ID", modifyByUser_ID) :
                new ObjectParameter("ModifyByUser_ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertBankAccountofOrg", accountTitleParameter, bank_IDParameter, branchCodeParameter, creationDateParameter, enteredByUser_IDParameter, modifyByUser_IDParameter, isActiveParameter, org_IDParameter);
        }
    
        public virtual int usp_InsertFundInfoofOrg(string fundSourceName, Nullable<int> fundSourceType, string transferMeans, Nullable<decimal> transferAmount, Nullable<int> enterByUser_ID, Nullable<bool> isActive, Nullable<long> org_ID, Nullable<int> rcvYear)
        {
            var fundSourceNameParameter = fundSourceName != null ?
                new ObjectParameter("FundSourceName", fundSourceName) :
                new ObjectParameter("FundSourceName", typeof(string));
    
            var fundSourceTypeParameter = fundSourceType.HasValue ?
                new ObjectParameter("FundSourceType", fundSourceType) :
                new ObjectParameter("FundSourceType", typeof(int));
    
            var transferMeansParameter = transferMeans != null ?
                new ObjectParameter("TransferMeans", transferMeans) :
                new ObjectParameter("TransferMeans", typeof(string));
    
            var transferAmountParameter = transferAmount.HasValue ?
                new ObjectParameter("TransferAmount", transferAmount) :
                new ObjectParameter("TransferAmount", typeof(decimal));
    
            var enterByUser_IDParameter = enterByUser_ID.HasValue ?
                new ObjectParameter("EnterByUser_ID", enterByUser_ID) :
                new ObjectParameter("EnterByUser_ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            var rcvYearParameter = rcvYear.HasValue ?
                new ObjectParameter("RcvYear", rcvYear) :
                new ObjectParameter("RcvYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertFundInfoofOrg", fundSourceNameParameter, fundSourceTypeParameter, transferMeansParameter, transferAmountParameter, enterByUser_IDParameter, isActiveParameter, org_IDParameter, rcvYearParameter);
        }
    
        public virtual int usp_InsertGoverningBody(string partnerName, string partnerCNIC, string partnerONIC, Nullable<double> partnerShare, string partnerAddress, string partnerContactNo, string partnerMobileNo, string partnerCitizenNo, string partnerPassportNo, Nullable<long> orgDoc_ID, Nullable<int> user_ID, string nICImgPath, Nullable<int> designationID, string occupation, Nullable<int> nationalityID)
        {
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var partnerCNICParameter = partnerCNIC != null ?
                new ObjectParameter("PartnerCNIC", partnerCNIC) :
                new ObjectParameter("PartnerCNIC", typeof(string));
    
            var partnerONICParameter = partnerONIC != null ?
                new ObjectParameter("PartnerONIC", partnerONIC) :
                new ObjectParameter("PartnerONIC", typeof(string));
    
            var partnerShareParameter = partnerShare.HasValue ?
                new ObjectParameter("PartnerShare", partnerShare) :
                new ObjectParameter("PartnerShare", typeof(double));
    
            var partnerAddressParameter = partnerAddress != null ?
                new ObjectParameter("PartnerAddress", partnerAddress) :
                new ObjectParameter("PartnerAddress", typeof(string));
    
            var partnerContactNoParameter = partnerContactNo != null ?
                new ObjectParameter("PartnerContactNo", partnerContactNo) :
                new ObjectParameter("PartnerContactNo", typeof(string));
    
            var partnerMobileNoParameter = partnerMobileNo != null ?
                new ObjectParameter("PartnerMobileNo", partnerMobileNo) :
                new ObjectParameter("PartnerMobileNo", typeof(string));
    
            var partnerCitizenNoParameter = partnerCitizenNo != null ?
                new ObjectParameter("PartnerCitizenNo", partnerCitizenNo) :
                new ObjectParameter("PartnerCitizenNo", typeof(string));
    
            var partnerPassportNoParameter = partnerPassportNo != null ?
                new ObjectParameter("PartnerPassportNo", partnerPassportNo) :
                new ObjectParameter("PartnerPassportNo", typeof(string));
    
            var orgDoc_IDParameter = orgDoc_ID.HasValue ?
                new ObjectParameter("OrgDoc_ID", orgDoc_ID) :
                new ObjectParameter("OrgDoc_ID", typeof(long));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var nICImgPathParameter = nICImgPath != null ?
                new ObjectParameter("NICImgPath", nICImgPath) :
                new ObjectParameter("NICImgPath", typeof(string));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var nationalityIDParameter = nationalityID.HasValue ?
                new ObjectParameter("NationalityID", nationalityID) :
                new ObjectParameter("NationalityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertGoverningBody", partnerNameParameter, partnerCNICParameter, partnerONICParameter, partnerShareParameter, partnerAddressParameter, partnerContactNoParameter, partnerMobileNoParameter, partnerCitizenNoParameter, partnerPassportNoParameter, orgDoc_IDParameter, user_IDParameter, nICImgPathParameter, designationIDParameter, occupationParameter, nationalityIDParameter);
        }
    
        public virtual int usp_InsertRenewalReport(Nullable<int> rReportYear, Nullable<System.DateTime> submissionDate, Nullable<long> org_ID, Nullable<System.DateTime> rRResolutionDate, Nullable<bool> isAuthorityLetter, Nullable<int> enterByUser_ID)
        {
            var rReportYearParameter = rReportYear.HasValue ?
                new ObjectParameter("RReportYear", rReportYear) :
                new ObjectParameter("RReportYear", typeof(int));
    
            var submissionDateParameter = submissionDate.HasValue ?
                new ObjectParameter("SubmissionDate", submissionDate) :
                new ObjectParameter("SubmissionDate", typeof(System.DateTime));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            var rRResolutionDateParameter = rRResolutionDate.HasValue ?
                new ObjectParameter("RRResolutionDate", rRResolutionDate) :
                new ObjectParameter("RRResolutionDate", typeof(System.DateTime));
    
            var isAuthorityLetterParameter = isAuthorityLetter.HasValue ?
                new ObjectParameter("IsAuthorityLetter", isAuthorityLetter) :
                new ObjectParameter("IsAuthorityLetter", typeof(bool));
    
            var enterByUser_IDParameter = enterByUser_ID.HasValue ?
                new ObjectParameter("EnterByUser_ID", enterByUser_ID) :
                new ObjectParameter("EnterByUser_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertRenewalReport", rReportYearParameter, submissionDateParameter, org_IDParameter, rRResolutionDateParameter, isAuthorityLetterParameter, enterByUser_IDParameter);
        }
    
        public virtual int usp_UpdateAssetofOrg(Nullable<long> assetID, string assetName, Nullable<int> assetType, Nullable<decimal> assetValue, Nullable<System.DateTime> purchaseDate, Nullable<int> modifyByUser_ID, Nullable<bool> isActive, Nullable<System.DateTime> isActiveDate, Nullable<long> org_ID)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(long));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetValueParameter = assetValue.HasValue ?
                new ObjectParameter("AssetValue", assetValue) :
                new ObjectParameter("AssetValue", typeof(decimal));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var modifyByUser_IDParameter = modifyByUser_ID.HasValue ?
                new ObjectParameter("ModifyByUser_ID", modifyByUser_ID) :
                new ObjectParameter("ModifyByUser_ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isActiveDateParameter = isActiveDate.HasValue ?
                new ObjectParameter("IsActiveDate", isActiveDate) :
                new ObjectParameter("IsActiveDate", typeof(System.DateTime));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAssetofOrg", assetIDParameter, assetNameParameter, assetTypeParameter, assetValueParameter, purchaseDateParameter, modifyByUser_IDParameter, isActiveParameter, isActiveDateParameter, org_IDParameter);
        }
    
        public virtual int usp_UpdateAssociationInfo(Nullable<long> associationID, Nullable<int> associationType, string associationTitle, Nullable<System.DateTime> associationDate, string duration, Nullable<System.DateTime> expiryDate, Nullable<int> modifyByUser_ID, Nullable<bool> isActive, Nullable<System.DateTime> isActiveDate, Nullable<long> org_Id)
        {
            var associationIDParameter = associationID.HasValue ?
                new ObjectParameter("AssociationID", associationID) :
                new ObjectParameter("AssociationID", typeof(long));
    
            var associationTypeParameter = associationType.HasValue ?
                new ObjectParameter("AssociationType", associationType) :
                new ObjectParameter("AssociationType", typeof(int));
    
            var associationTitleParameter = associationTitle != null ?
                new ObjectParameter("AssociationTitle", associationTitle) :
                new ObjectParameter("AssociationTitle", typeof(string));
    
            var associationDateParameter = associationDate.HasValue ?
                new ObjectParameter("AssociationDate", associationDate) :
                new ObjectParameter("AssociationDate", typeof(System.DateTime));
    
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var modifyByUser_IDParameter = modifyByUser_ID.HasValue ?
                new ObjectParameter("ModifyByUser_ID", modifyByUser_ID) :
                new ObjectParameter("ModifyByUser_ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isActiveDateParameter = isActiveDate.HasValue ?
                new ObjectParameter("IsActiveDate", isActiveDate) :
                new ObjectParameter("IsActiveDate", typeof(System.DateTime));
    
            var org_IdParameter = org_Id.HasValue ?
                new ObjectParameter("Org_Id", org_Id) :
                new ObjectParameter("Org_Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAssociationInfo", associationIDParameter, associationTypeParameter, associationTitleParameter, associationDateParameter, durationParameter, expiryDateParameter, modifyByUser_IDParameter, isActiveParameter, isActiveDateParameter, org_IdParameter);
        }
    
        public virtual int usp_UpdateBAnkAccntofOrg(Nullable<long> accountID, string accountTitle, Nullable<int> bank_ID, string branchCode, Nullable<System.DateTime> creationDate, Nullable<int> modifyByUser_ID, Nullable<bool> isActive, Nullable<System.DateTime> isActiveDate, Nullable<long> org_ID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var accountTitleParameter = accountTitle != null ?
                new ObjectParameter("AccountTitle", accountTitle) :
                new ObjectParameter("AccountTitle", typeof(string));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(int));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var modifyByUser_IDParameter = modifyByUser_ID.HasValue ?
                new ObjectParameter("ModifyByUser_ID", modifyByUser_ID) :
                new ObjectParameter("ModifyByUser_ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isActiveDateParameter = isActiveDate.HasValue ?
                new ObjectParameter("IsActiveDate", isActiveDate) :
                new ObjectParameter("IsActiveDate", typeof(System.DateTime));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateBAnkAccntofOrg", accountIDParameter, accountTitleParameter, bank_IDParameter, branchCodeParameter, creationDateParameter, modifyByUser_IDParameter, isActiveParameter, isActiveDateParameter, org_IDParameter);
        }
    
        public virtual int usp_UpdateFundSourceInfo(Nullable<long> fundSourceID, string fundSourceName, Nullable<int> fundSourceType, string transferMeans, Nullable<decimal> transferAmount, Nullable<int> modifyByUser_ID, Nullable<bool> isActive, Nullable<System.DateTime> isActiveDate, Nullable<long> org_Id, Nullable<int> rcvYear)
        {
            var fundSourceIDParameter = fundSourceID.HasValue ?
                new ObjectParameter("FundSourceID", fundSourceID) :
                new ObjectParameter("FundSourceID", typeof(long));
    
            var fundSourceNameParameter = fundSourceName != null ?
                new ObjectParameter("FundSourceName", fundSourceName) :
                new ObjectParameter("FundSourceName", typeof(string));
    
            var fundSourceTypeParameter = fundSourceType.HasValue ?
                new ObjectParameter("FundSourceType", fundSourceType) :
                new ObjectParameter("FundSourceType", typeof(int));
    
            var transferMeansParameter = transferMeans != null ?
                new ObjectParameter("TransferMeans", transferMeans) :
                new ObjectParameter("TransferMeans", typeof(string));
    
            var transferAmountParameter = transferAmount.HasValue ?
                new ObjectParameter("TransferAmount", transferAmount) :
                new ObjectParameter("TransferAmount", typeof(decimal));
    
            var modifyByUser_IDParameter = modifyByUser_ID.HasValue ?
                new ObjectParameter("ModifyByUser_ID", modifyByUser_ID) :
                new ObjectParameter("ModifyByUser_ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isActiveDateParameter = isActiveDate.HasValue ?
                new ObjectParameter("IsActiveDate", isActiveDate) :
                new ObjectParameter("IsActiveDate", typeof(System.DateTime));
    
            var org_IdParameter = org_Id.HasValue ?
                new ObjectParameter("Org_Id", org_Id) :
                new ObjectParameter("Org_Id", typeof(long));
    
            var rcvYearParameter = rcvYear.HasValue ?
                new ObjectParameter("RcvYear", rcvYear) :
                new ObjectParameter("RcvYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateFundSourceInfo", fundSourceIDParameter, fundSourceNameParameter, fundSourceTypeParameter, transferMeansParameter, transferAmountParameter, modifyByUser_IDParameter, isActiveParameter, isActiveDateParameter, org_IdParameter, rcvYearParameter);
        }
    
        public virtual int usp_UpdateGoverningBody(Nullable<long> partnerID, string partnerName, string partnerCNIC, string partnerONIC, string partnerAddress, string partnerContactNo, string partnerMobileNo, string partnerCitizenNo, string partnerPassportNo, Nullable<long> orgDoc_ID, Nullable<int> user_ID, string nICImgPath, Nullable<int> designationID, string occupation, Nullable<int> nationalityID)
        {
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(long));
    
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var partnerCNICParameter = partnerCNIC != null ?
                new ObjectParameter("PartnerCNIC", partnerCNIC) :
                new ObjectParameter("PartnerCNIC", typeof(string));
    
            var partnerONICParameter = partnerONIC != null ?
                new ObjectParameter("PartnerONIC", partnerONIC) :
                new ObjectParameter("PartnerONIC", typeof(string));
    
            var partnerAddressParameter = partnerAddress != null ?
                new ObjectParameter("PartnerAddress", partnerAddress) :
                new ObjectParameter("PartnerAddress", typeof(string));
    
            var partnerContactNoParameter = partnerContactNo != null ?
                new ObjectParameter("PartnerContactNo", partnerContactNo) :
                new ObjectParameter("PartnerContactNo", typeof(string));
    
            var partnerMobileNoParameter = partnerMobileNo != null ?
                new ObjectParameter("PartnerMobileNo", partnerMobileNo) :
                new ObjectParameter("PartnerMobileNo", typeof(string));
    
            var partnerCitizenNoParameter = partnerCitizenNo != null ?
                new ObjectParameter("PartnerCitizenNo", partnerCitizenNo) :
                new ObjectParameter("PartnerCitizenNo", typeof(string));
    
            var partnerPassportNoParameter = partnerPassportNo != null ?
                new ObjectParameter("PartnerPassportNo", partnerPassportNo) :
                new ObjectParameter("PartnerPassportNo", typeof(string));
    
            var orgDoc_IDParameter = orgDoc_ID.HasValue ?
                new ObjectParameter("OrgDoc_ID", orgDoc_ID) :
                new ObjectParameter("OrgDoc_ID", typeof(long));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var nICImgPathParameter = nICImgPath != null ?
                new ObjectParameter("NICImgPath", nICImgPath) :
                new ObjectParameter("NICImgPath", typeof(string));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var nationalityIDParameter = nationalityID.HasValue ?
                new ObjectParameter("NationalityID", nationalityID) :
                new ObjectParameter("NationalityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateGoverningBody", partnerIDParameter, partnerNameParameter, partnerCNICParameter, partnerONICParameter, partnerAddressParameter, partnerContactNoParameter, partnerMobileNoParameter, partnerCitizenNoParameter, partnerPassportNoParameter, orgDoc_IDParameter, user_IDParameter, nICImgPathParameter, designationIDParameter, occupationParameter, nationalityIDParameter);
        }
    
        public virtual int usp_UpdateRenewalReport(Nullable<long> rReportID, Nullable<int> rReportYear, Nullable<System.DateTime> submissionDate, Nullable<long> org_ID, Nullable<System.DateTime> rRResolutionDate, Nullable<bool> isAuthorityLetter, Nullable<int> modifyByUser_ID)
        {
            var rReportIDParameter = rReportID.HasValue ?
                new ObjectParameter("RReportID", rReportID) :
                new ObjectParameter("RReportID", typeof(long));
    
            var rReportYearParameter = rReportYear.HasValue ?
                new ObjectParameter("RReportYear", rReportYear) :
                new ObjectParameter("RReportYear", typeof(int));
    
            var submissionDateParameter = submissionDate.HasValue ?
                new ObjectParameter("SubmissionDate", submissionDate) :
                new ObjectParameter("SubmissionDate", typeof(System.DateTime));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            var rRResolutionDateParameter = rRResolutionDate.HasValue ?
                new ObjectParameter("RRResolutionDate", rRResolutionDate) :
                new ObjectParameter("RRResolutionDate", typeof(System.DateTime));
    
            var isAuthorityLetterParameter = isAuthorityLetter.HasValue ?
                new ObjectParameter("IsAuthorityLetter", isAuthorityLetter) :
                new ObjectParameter("IsAuthorityLetter", typeof(bool));
    
            var modifyByUser_IDParameter = modifyByUser_ID.HasValue ?
                new ObjectParameter("ModifyByUser_ID", modifyByUser_ID) :
                new ObjectParameter("ModifyByUser_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateRenewalReport", rReportIDParameter, rReportYearParameter, submissionDateParameter, org_IDParameter, rRResolutionDateParameter, isAuthorityLetterParameter, modifyByUser_IDParameter);
        }
    
        public virtual int usp_InsertAuditReport(Nullable<int> auditReportYear, string charteredAcct, Nullable<decimal> totalDonation, Nullable<long> renewalReport_ID, Nullable<int> enteredByUser_ID)
        {
            var auditReportYearParameter = auditReportYear.HasValue ?
                new ObjectParameter("AuditReportYear", auditReportYear) :
                new ObjectParameter("AuditReportYear", typeof(int));
    
            var charteredAcctParameter = charteredAcct != null ?
                new ObjectParameter("CharteredAcct", charteredAcct) :
                new ObjectParameter("CharteredAcct", typeof(string));
    
            var totalDonationParameter = totalDonation.HasValue ?
                new ObjectParameter("TotalDonation", totalDonation) :
                new ObjectParameter("TotalDonation", typeof(decimal));
    
            var renewalReport_IDParameter = renewalReport_ID.HasValue ?
                new ObjectParameter("RenewalReport_ID", renewalReport_ID) :
                new ObjectParameter("RenewalReport_ID", typeof(long));
    
            var enteredByUser_IDParameter = enteredByUser_ID.HasValue ?
                new ObjectParameter("EnteredByUser_ID", enteredByUser_ID) :
                new ObjectParameter("EnteredByUser_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertAuditReport", auditReportYearParameter, charteredAcctParameter, totalDonationParameter, renewalReport_IDParameter, enteredByUser_IDParameter);
        }
    
        public virtual int usp_UpdateAuditReport(Nullable<long> auditReportID, Nullable<int> auditReportYear, string charteredAcct, Nullable<decimal> totalDonation, Nullable<long> renewalReport_ID, Nullable<int> modifyByUser_ID)
        {
            var auditReportIDParameter = auditReportID.HasValue ?
                new ObjectParameter("AuditReportID", auditReportID) :
                new ObjectParameter("AuditReportID", typeof(long));
    
            var auditReportYearParameter = auditReportYear.HasValue ?
                new ObjectParameter("AuditReportYear", auditReportYear) :
                new ObjectParameter("AuditReportYear", typeof(int));
    
            var charteredAcctParameter = charteredAcct != null ?
                new ObjectParameter("CharteredAcct", charteredAcct) :
                new ObjectParameter("CharteredAcct", typeof(string));
    
            var totalDonationParameter = totalDonation.HasValue ?
                new ObjectParameter("TotalDonation", totalDonation) :
                new ObjectParameter("TotalDonation", typeof(decimal));
    
            var renewalReport_IDParameter = renewalReport_ID.HasValue ?
                new ObjectParameter("RenewalReport_ID", renewalReport_ID) :
                new ObjectParameter("RenewalReport_ID", typeof(long));
    
            var modifyByUser_IDParameter = modifyByUser_ID.HasValue ?
                new ObjectParameter("ModifyByUser_ID", modifyByUser_ID) :
                new ObjectParameter("ModifyByUser_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAuditReport", auditReportIDParameter, auditReportYearParameter, charteredAcctParameter, totalDonationParameter, renewalReport_IDParameter, modifyByUser_IDParameter);
        }
    
        public virtual int usp_InserNewStaff(Nullable<int> staffType, Nullable<int> designation_ID, string name, string cNIC, string contactNo, Nullable<decimal> salary, Nullable<int> enteredByUser_ID, Nullable<bool> isActive, Nullable<long> org_ID)
        {
            var staffTypeParameter = staffType.HasValue ?
                new ObjectParameter("StaffType", staffType) :
                new ObjectParameter("StaffType", typeof(int));
    
            var designation_IDParameter = designation_ID.HasValue ?
                new ObjectParameter("Designation_ID", designation_ID) :
                new ObjectParameter("Designation_ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var cNICParameter = cNIC != null ?
                new ObjectParameter("CNIC", cNIC) :
                new ObjectParameter("CNIC", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            var enteredByUser_IDParameter = enteredByUser_ID.HasValue ?
                new ObjectParameter("EnteredByUser_ID", enteredByUser_ID) :
                new ObjectParameter("EnteredByUser_ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InserNewStaff", staffTypeParameter, designation_IDParameter, nameParameter, cNICParameter, contactNoParameter, salaryParameter, enteredByUser_IDParameter, isActiveParameter, org_IDParameter);
        }
    
        public virtual int usp_UpdateStaff(Nullable<long> staffID, Nullable<int> staffType, Nullable<int> designation_ID, string name, string cNIC, string contactNo, Nullable<decimal> salary, Nullable<int> modifyByUser_ID, Nullable<bool> isActive, Nullable<System.DateTime> isActiveDate, Nullable<long> org_ID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(long));
    
            var staffTypeParameter = staffType.HasValue ?
                new ObjectParameter("StaffType", staffType) :
                new ObjectParameter("StaffType", typeof(int));
    
            var designation_IDParameter = designation_ID.HasValue ?
                new ObjectParameter("Designation_ID", designation_ID) :
                new ObjectParameter("Designation_ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var cNICParameter = cNIC != null ?
                new ObjectParameter("CNIC", cNIC) :
                new ObjectParameter("CNIC", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            var modifyByUser_IDParameter = modifyByUser_ID.HasValue ?
                new ObjectParameter("ModifyByUser_ID", modifyByUser_ID) :
                new ObjectParameter("ModifyByUser_ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isActiveDateParameter = isActiveDate.HasValue ?
                new ObjectParameter("IsActiveDate", isActiveDate) :
                new ObjectParameter("IsActiveDate", typeof(System.DateTime));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateStaff", staffIDParameter, staffTypeParameter, designation_IDParameter, nameParameter, cNICParameter, contactNoParameter, salaryParameter, modifyByUser_IDParameter, isActiveParameter, isActiveDateParameter, org_IDParameter);
        }
    
        public virtual ObjectResult<usp_GetAuditReportsofRenewalReport_Result> usp_GetAuditReportsofRenewalReport(Nullable<long> renewalReportID)
        {
            var renewalReportIDParameter = renewalReportID.HasValue ?
                new ObjectParameter("RenewalReportID", renewalReportID) :
                new ObjectParameter("RenewalReportID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAuditReportsofRenewalReport_Result>("usp_GetAuditReportsofRenewalReport", renewalReportIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAllAssociationsofOrg_Result> usp_GetAllAssociationsofOrg(Nullable<long> org_ID)
        {
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllAssociationsofOrg_Result>("usp_GetAllAssociationsofOrg", org_IDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssetsofanOrg_Result> usp_GetAssetsofanOrg(Nullable<long> org_ID)
        {
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssetsofanOrg_Result>("usp_GetAssetsofanOrg", org_IDParameter);
        }
    
        public virtual ObjectResult<usp_GetBankAccountsofOrg_Result> usp_GetBankAccountsofOrg(Nullable<long> org_ID)
        {
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBankAccountsofOrg_Result>("usp_GetBankAccountsofOrg", org_IDParameter);
        }
    
        public virtual ObjectResult<usp_GetFundSourcesofOrg_Result> usp_GetFundSourcesofOrg(Nullable<long> org_ID)
        {
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFundSourcesofOrg_Result>("usp_GetFundSourcesofOrg", org_IDParameter);
        }
    
        public virtual ObjectResult<usp_GetOrgRenewalReports_Result1> usp_GetOrgRenewalReports(Nullable<long> orgID)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetOrgRenewalReports_Result1>("usp_GetOrgRenewalReports", orgIDParameter);
        }
    
        public virtual int usp_InsertNewProject(string projectTitle, Nullable<System.DateTime> startDate, Nullable<long> org_ID, Nullable<bool> isComplete, Nullable<int> enteredByUser_ID)
        {
            var projectTitleParameter = projectTitle != null ?
                new ObjectParameter("ProjectTitle", projectTitle) :
                new ObjectParameter("ProjectTitle", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            var isCompleteParameter = isComplete.HasValue ?
                new ObjectParameter("IsComplete", isComplete) :
                new ObjectParameter("IsComplete", typeof(bool));
    
            var enteredByUser_IDParameter = enteredByUser_ID.HasValue ?
                new ObjectParameter("EnteredByUser_ID", enteredByUser_ID) :
                new ObjectParameter("EnteredByUser_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewProject", projectTitleParameter, startDateParameter, org_IDParameter, isCompleteParameter, enteredByUser_IDParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllProjectsofOrg_Result> usp_SelectAllProjectsofOrg(Nullable<long> orgID)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllProjectsofOrg_Result>("usp_SelectAllProjectsofOrg", orgIDParameter);
        }
    
        public virtual int usp_UpdateProject(Nullable<long> projectID, string projectTitle, Nullable<System.DateTime> startDate, Nullable<long> org_ID, Nullable<bool> isComplete, Nullable<int> modifyByUser_ID, Nullable<bool> isActive, Nullable<System.DateTime> isActiveDate)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(long));
    
            var projectTitleParameter = projectTitle != null ?
                new ObjectParameter("ProjectTitle", projectTitle) :
                new ObjectParameter("ProjectTitle", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            var isCompleteParameter = isComplete.HasValue ?
                new ObjectParameter("IsComplete", isComplete) :
                new ObjectParameter("IsComplete", typeof(bool));
    
            var modifyByUser_IDParameter = modifyByUser_ID.HasValue ?
                new ObjectParameter("ModifyByUser_ID", modifyByUser_ID) :
                new ObjectParameter("ModifyByUser_ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isActiveDateParameter = isActiveDate.HasValue ?
                new ObjectParameter("IsActiveDate", isActiveDate) :
                new ObjectParameter("IsActiveDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateProject", projectIDParameter, projectTitleParameter, startDateParameter, org_IDParameter, isCompleteParameter, modifyByUser_IDParameter, isActiveParameter, isActiveDateParameter);
        }
    
        public virtual ObjectResult<usp_GetStaffMembersofOrg_Result> usp_GetStaffMembersofOrg4(Nullable<long> org_ID)
        {
            var org_IDParameter = org_ID.HasValue ?
                new ObjectParameter("Org_ID", org_ID) :
                new ObjectParameter("Org_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetStaffMembersofOrg_Result>("usp_GetStaffMembersofOrg4", org_IDParameter);
        }
    
        public virtual ObjectResult<usp_GetPartnersUsingOrgIdForFirm_Result> usp_GetPartnersUsingOrgIdForFirm(Nullable<long> orgId, Nullable<long> document_ID)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(long));
    
            var document_IDParameter = document_ID.HasValue ?
                new ObjectParameter("Document_ID", document_ID) :
                new ObjectParameter("Document_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPartnersUsingOrgIdForFirm_Result>("usp_GetPartnersUsingOrgIdForFirm", orgIdParameter, document_IDParameter);
        }
    
        public virtual int usp_InsertPartnerShareforNewFormE(Nullable<long> partner_ID, Nullable<long> orgDoc_ID, Nullable<double> partnerShare, Nullable<int> enteredByUser_ID)
        {
            var partner_IDParameter = partner_ID.HasValue ?
                new ObjectParameter("Partner_ID", partner_ID) :
                new ObjectParameter("Partner_ID", typeof(long));
    
            var orgDoc_IDParameter = orgDoc_ID.HasValue ?
                new ObjectParameter("OrgDoc_ID", orgDoc_ID) :
                new ObjectParameter("OrgDoc_ID", typeof(long));
    
            var partnerShareParameter = partnerShare.HasValue ?
                new ObjectParameter("PartnerShare", partnerShare) :
                new ObjectParameter("PartnerShare", typeof(double));
    
            var enteredByUser_IDParameter = enteredByUser_ID.HasValue ?
                new ObjectParameter("EnteredByUser_ID", enteredByUser_ID) :
                new ObjectParameter("EnteredByUser_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertPartnerShareforNewFormE", partner_IDParameter, orgDoc_IDParameter, partnerShareParameter, enteredByUser_IDParameter);
        }
    
        public virtual int usp_UpdateFormHIssueInfo(Nullable<long> orgDocID, Nullable<System.DateTime> issueDate, string issueNo, Nullable<int> user_ID)
        {
            var orgDocIDParameter = orgDocID.HasValue ?
                new ObjectParameter("OrgDocID", orgDocID) :
                new ObjectParameter("OrgDocID", typeof(long));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var issueNoParameter = issueNo != null ?
                new ObjectParameter("IssueNo", issueNo) :
                new ObjectParameter("IssueNo", typeof(string));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateFormHIssueInfo", orgDocIDParameter, issueDateParameter, issueNoParameter, user_IDParameter);
        }
    
        public virtual int usp_InsertFormDPartnerNameORAddress(Nullable<long> partner_ID, string partnerName, string partnerAdress, Nullable<long> orgDoc_ID, Nullable<int> enterByUser_ID)
        {
            var partner_IDParameter = partner_ID.HasValue ?
                new ObjectParameter("Partner_ID", partner_ID) :
                new ObjectParameter("Partner_ID", typeof(long));
    
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var partnerAdressParameter = partnerAdress != null ?
                new ObjectParameter("PartnerAdress", partnerAdress) :
                new ObjectParameter("PartnerAdress", typeof(string));
    
            var orgDoc_IDParameter = orgDoc_ID.HasValue ?
                new ObjectParameter("OrgDoc_ID", orgDoc_ID) :
                new ObjectParameter("OrgDoc_ID", typeof(long));
    
            var enterByUser_IDParameter = enterByUser_ID.HasValue ?
                new ObjectParameter("EnterByUser_ID", enterByUser_ID) :
                new ObjectParameter("EnterByUser_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertFormDPartnerNameORAddress", partner_IDParameter, partnerNameParameter, partnerAdressParameter, orgDoc_IDParameter, enterByUser_IDParameter);
        }
    
        public virtual int usp_UpdateFormDPartnerNameORAddress(Nullable<long> pAdressID, Nullable<long> partner_ID, string partnerName, string partnerAdress, Nullable<long> orgDoc_ID, Nullable<int> modifyByUser_ID)
        {
            var pAdressIDParameter = pAdressID.HasValue ?
                new ObjectParameter("PAdressID", pAdressID) :
                new ObjectParameter("PAdressID", typeof(long));
    
            var partner_IDParameter = partner_ID.HasValue ?
                new ObjectParameter("Partner_ID", partner_ID) :
                new ObjectParameter("Partner_ID", typeof(long));
    
            var partnerNameParameter = partnerName != null ?
                new ObjectParameter("PartnerName", partnerName) :
                new ObjectParameter("PartnerName", typeof(string));
    
            var partnerAdressParameter = partnerAdress != null ?
                new ObjectParameter("PartnerAdress", partnerAdress) :
                new ObjectParameter("PartnerAdress", typeof(string));
    
            var orgDoc_IDParameter = orgDoc_ID.HasValue ?
                new ObjectParameter("OrgDoc_ID", orgDoc_ID) :
                new ObjectParameter("OrgDoc_ID", typeof(long));
    
            var modifyByUser_IDParameter = modifyByUser_ID.HasValue ?
                new ObjectParameter("ModifyByUser_ID", modifyByUser_ID) :
                new ObjectParameter("ModifyByUser_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateFormDPartnerNameORAddress", pAdressIDParameter, partner_IDParameter, partnerNameParameter, partnerAdressParameter, orgDoc_IDParameter, modifyByUser_IDParameter);
        }
    
        public virtual int usp_InsertFormDnHEntry(Nullable<long> orgId, Nullable<System.DateTime> formDSubmissionDate, string formDDocPath, string newFormHIssueNo, Nullable<System.DateTime> newFormHIssueDate, string newFormHDocPath, Nullable<int> user_ID, ObjectParameter orgDocID)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(long));
    
            var formDSubmissionDateParameter = formDSubmissionDate.HasValue ?
                new ObjectParameter("FormDSubmissionDate", formDSubmissionDate) :
                new ObjectParameter("FormDSubmissionDate", typeof(System.DateTime));
    
            var formDDocPathParameter = formDDocPath != null ?
                new ObjectParameter("FormDDocPath", formDDocPath) :
                new ObjectParameter("FormDDocPath", typeof(string));
    
            var newFormHIssueNoParameter = newFormHIssueNo != null ?
                new ObjectParameter("NewFormHIssueNo", newFormHIssueNo) :
                new ObjectParameter("NewFormHIssueNo", typeof(string));
    
            var newFormHIssueDateParameter = newFormHIssueDate.HasValue ?
                new ObjectParameter("NewFormHIssueDate", newFormHIssueDate) :
                new ObjectParameter("NewFormHIssueDate", typeof(System.DateTime));
    
            var newFormHDocPathParameter = newFormHDocPath != null ?
                new ObjectParameter("NewFormHDocPath", newFormHDocPath) :
                new ObjectParameter("NewFormHDocPath", typeof(string));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertFormDnHEntry", orgIdParameter, formDSubmissionDateParameter, formDDocPathParameter, newFormHIssueNoParameter, newFormHIssueDateParameter, newFormHDocPathParameter, user_IDParameter, orgDocID);
        }
    }
}
